:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the UDPServer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_UDPServer:

UDPServer
=========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Helper class to implement a UDP server.

Description
-----------

A simple server that opens a UDP socket and returns connected :ref:`PacketPeerUDP<class_PacketPeerUDP>` upon receiving new packets. See also :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`.

After starting the server (:ref:`listen<class_UDPServer_method_listen>`), you will need to :ref:`poll<class_UDPServer_method_poll>` it at regular intervals (e.g. inside :ref:`Node._process<class_Node_method__process>`) for it to process new packets, delivering them to the appropriate :ref:`PacketPeerUDP<class_PacketPeerUDP>`, and taking new connections.

Below a small example of how it can be used:

::

    # server.gd
    extends Node
    
    var server := UDPServer.new()
    var peers = []
    
    func _ready():
        server.listen(4242)
    
    func _process(delta):
        server.poll() # Important!
        if server.is_connection_available():
            var peer : PacketPeerUDP = server.take_connection()
            var pkt = peer.get_packet()
            print("Accepted peer: %s:%s" % [peer.get_packet_ip(), peer.get_packet_port()])
            print("Received data: %s" % [pkt.get_string_from_utf8()])
            # Reply so it knows we received the message.
            peer.put_packet(pkt)
            # Keep a reference so we can keep contacting the remote peer.
            peers.append(peer)
    
        for i in range(0, peers.size()):
            pass # Do something with the connected peers.
    

::

    # client.gd
    extends Node
    
    var udp := PacketPeerUDP.new()
    var connected = false
    
    func _ready():
        udp.connect_to_host("127.0.0.1", 4242)
    
    func _process(delta):
        if !connected:
            # Try to contact server
            udp.put_packet("The answer is... 42!".to_utf8())
        if udp.get_available_packet_count() > 0:
            print("Connected: %s" % udp.get_packet().get_string_from_utf8())
            connected = true

Properties
----------

+-----------------------+----------------------------------------------------------------------------------+--------+
| :ref:`int<class_int>` | :ref:`max_pending_connections<class_UDPServer_property_max_pending_connections>` | ``16`` |
+-----------------------+----------------------------------------------------------------------------------+--------+

Methods
-------

+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_connection_available<class_UDPServer_method_is_connection_available>` **(** **)** |const|                                |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_listening<class_UDPServer_method_is_listening>` **(** **)** |const|                                                      |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`listen<class_UDPServer_method_listen>` **(** :ref:`int<class_int>` port, :ref:`String<class_String>` bind_address="*" **)** |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`poll<class_UDPServer_method_poll>` **(** **)**                                                                              |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`stop<class_UDPServer_method_stop>` **(** **)**                                                                              |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+
| :ref:`PacketPeerUDP<class_PacketPeerUDP>` | :ref:`take_connection<class_UDPServer_method_take_connection>` **(** **)**                                                        |
+-------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_UDPServer_property_max_pending_connections:

- :ref:`int<class_int>` **max_pending_connections**

+-----------+------------------------------------+
| *Default* | ``16``                             |
+-----------+------------------------------------+
| *Setter*  | set_max_pending_connections(value) |
+-----------+------------------------------------+
| *Getter*  | get_max_pending_connections()      |
+-----------+------------------------------------+

Define the maximum number of pending connections, during :ref:`poll<class_UDPServer_method_poll>`, any new pending connection exceeding that value will be automatically dropped. Setting this value to ``0`` effectively prevents any new pending connection to be accepted (e.g. when all your players have connected).

Method Descriptions
-------------------

.. _class_UDPServer_method_is_connection_available:

- :ref:`bool<class_bool>` **is_connection_available** **(** **)** |const|

Returns ``true`` if a packet with a new address/port combination was received on the socket.

----

.. _class_UDPServer_method_is_listening:

- :ref:`bool<class_bool>` **is_listening** **(** **)** |const|

Returns ``true`` if the socket is open and listening on a port.

----

.. _class_UDPServer_method_listen:

- :ref:`Error<enum_@GlobalScope_Error>` **listen** **(** :ref:`int<class_int>` port, :ref:`String<class_String>` bind_address="*" **)**

Starts the server by opening a UDP socket listening on the given port. You can optionally specify a ``bind_address`` to only listen for packets sent to that address. See also :ref:`PacketPeerUDP.listen<class_PacketPeerUDP_method_listen>`.

----

.. _class_UDPServer_method_poll:

- :ref:`Error<enum_@GlobalScope_Error>` **poll** **(** **)**

Call this method at regular intervals (e.g. inside :ref:`Node._process<class_Node_method__process>`) to process new packets. And packet from known address/port pair will be delivered to the appropriate :ref:`PacketPeerUDP<class_PacketPeerUDP>`, any packet received from an unknown address/port pair will be added as a pending connection (see :ref:`is_connection_available<class_UDPServer_method_is_connection_available>`, :ref:`take_connection<class_UDPServer_method_take_connection>`). The maximum number of pending connection is defined via :ref:`max_pending_connections<class_UDPServer_property_max_pending_connections>`.

----

.. _class_UDPServer_method_stop:

- void **stop** **(** **)**

Stops the server, closing the UDP socket if open. Will close all connected :ref:`PacketPeerUDP<class_PacketPeerUDP>` accepted via :ref:`take_connection<class_UDPServer_method_take_connection>` (remote peers will not be notified).

----

.. _class_UDPServer_method_take_connection:

- :ref:`PacketPeerUDP<class_PacketPeerUDP>` **take_connection** **(** **)**

Returns the first pending connection (connected to the appropriate address/port). Will return ``null`` if no new connection is available. See also :ref:`is_connection_available<class_UDPServer_method_is_connection_available>`, :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
