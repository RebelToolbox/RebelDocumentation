:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the MenuButton.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_MenuButton:

MenuButton
==========

**Inherits:** :ref:`Button<class_Button>` **<** :ref:`BaseButton<class_BaseButton>` **<** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Special button that brings up a :ref:`PopupMenu<class_PopupMenu>` when clicked.

Description
-----------

Special button that brings up a :ref:`PopupMenu<class_PopupMenu>` when clicked.

New items can be created inside this :ref:`PopupMenu<class_PopupMenu>` using ``get_popup().add_item("My Item Name")``. You can also create them directly from the editor. To do so, select the ``MenuButton`` node, then in the toolbar at the top of the 2D editor, click **Items** then click **Add** in the popup. You will be able to give each item new properties.

See also :ref:`BaseButton<class_BaseButton>` which contains common properties and methods associated with this node.

Properties
----------

+-----------------------------------------------+-------------------------------------------------------------------+------------------------------+
| :ref:`ActionMode<enum_BaseButton_ActionMode>` | action_mode                                                       | ``0`` *(parent override)*    |
+-----------------------------------------------+-------------------------------------------------------------------+------------------------------+
| :ref:`bool<class_bool>`                       | flat                                                              | ``true`` *(parent override)* |
+-----------------------------------------------+-------------------------------------------------------------------+------------------------------+
| :ref:`FocusMode<enum_Control_FocusMode>`      | focus_mode                                                        | ``0`` *(parent override)*    |
+-----------------------------------------------+-------------------------------------------------------------------+------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`switch_on_hover<class_MenuButton_property_switch_on_hover>` | ``false``                    |
+-----------------------------------------------+-------------------------------------------------------------------+------------------------------+
| :ref:`bool<class_bool>`                       | toggle_mode                                                       | ``true`` *(parent override)* |
+-----------------------------------------------+-------------------------------------------------------------------+------------------------------+

Methods
-------

+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------+
| :ref:`PopupMenu<class_PopupMenu>` | :ref:`get_popup<class_MenuButton_method_get_popup>` **(** **)** |const|                                                  |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------+
| void                              | :ref:`set_disable_shortcuts<class_MenuButton_method_set_disable_shortcuts>` **(** :ref:`bool<class_bool>` disabled **)** |
+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------+

Theme Properties
----------------

+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color<class_MenuButton_theme_color_font_color>`                   | ``Color( 0.88, 0.88, 0.88, 1 )`` |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color_disabled<class_MenuButton_theme_color_font_color_disabled>` | ``Color( 1, 1, 1, 0.3 )``        |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color_focus<class_MenuButton_theme_color_font_color_focus>`       | ``Color( 0.94, 0.94, 0.94, 1 )`` |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color_hover<class_MenuButton_theme_color_font_color_hover>`       | ``Color( 0.94, 0.94, 0.94, 1 )`` |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`Color<class_Color>`       | :ref:`font_color_pressed<class_MenuButton_theme_color_font_color_pressed>`   | ``Color( 1, 1, 1, 1 )``          |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`int<class_int>`           | :ref:`hseparation<class_MenuButton_theme_constant_hseparation>`              | ``3``                            |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`Font<class_Font>`         | :ref:`font<class_MenuButton_theme_font_font>`                                |                                  |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`disabled<class_MenuButton_theme_style_disabled>`                       |                                  |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`focus<class_MenuButton_theme_style_focus>`                             |                                  |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`hover<class_MenuButton_theme_style_hover>`                             |                                  |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`normal<class_MenuButton_theme_style_normal>`                           |                                  |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`pressed<class_MenuButton_theme_style_pressed>`                         |                                  |
+---------------------------------+------------------------------------------------------------------------------+----------------------------------+

Signals
-------

.. _class_MenuButton_signal_about_to_show:

- **about_to_show** **(** **)**

Emitted when :ref:`PopupMenu<class_PopupMenu>` of this MenuButton is about to show.

Property Descriptions
---------------------

.. _class_MenuButton_property_switch_on_hover:

- :ref:`bool<class_bool>` **switch_on_hover**

+-----------+----------------------------+
| *Default* | ``false``                  |
+-----------+----------------------------+
| *Setter*  | set_switch_on_hover(value) |
+-----------+----------------------------+
| *Getter*  | is_switch_on_hover()       |
+-----------+----------------------------+

If ``true``, when the cursor hovers above another ``MenuButton`` within the same parent which also has ``switch_on_hover`` enabled, it will close the current ``MenuButton`` and open the other one.

Method Descriptions
-------------------

.. _class_MenuButton_method_get_popup:

- :ref:`PopupMenu<class_PopupMenu>` **get_popup** **(** **)** |const|

Returns the :ref:`PopupMenu<class_PopupMenu>` contained in this button.

**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their :ref:`CanvasItem.visible<class_CanvasItem_property_visible>` property.

----

.. _class_MenuButton_method_set_disable_shortcuts:

- void **set_disable_shortcuts** **(** :ref:`bool<class_bool>` disabled **)**

If ``true``, shortcuts are disabled and cannot be used to trigger the button.

Theme Property Descriptions
---------------------------

.. _class_MenuButton_theme_color_font_color:

- :ref:`Color<class_Color>` **font_color**

+-----------+----------------------------------+
| *Default* | ``Color( 0.88, 0.88, 0.88, 1 )`` |
+-----------+----------------------------------+

Default text :ref:`Color<class_Color>` of the ``MenuButton``.

----

.. _class_MenuButton_theme_color_font_color_disabled:

- :ref:`Color<class_Color>` **font_color_disabled**

+-----------+---------------------------+
| *Default* | ``Color( 1, 1, 1, 0.3 )`` |
+-----------+---------------------------+

Text :ref:`Color<class_Color>` used when the ``MenuButton`` is disabled.

----

.. _class_MenuButton_theme_color_font_color_focus:

- :ref:`Color<class_Color>` **font_color_focus**

+-----------+----------------------------------+
| *Default* | ``Color( 0.94, 0.94, 0.94, 1 )`` |
+-----------+----------------------------------+

Text :ref:`Color<class_Color>` used when the ``MenuButton`` is focused. Only replaces the normal text color of the button. Disabled, hovered, and pressed states take precedence over this color.

----

.. _class_MenuButton_theme_color_font_color_hover:

- :ref:`Color<class_Color>` **font_color_hover**

+-----------+----------------------------------+
| *Default* | ``Color( 0.94, 0.94, 0.94, 1 )`` |
+-----------+----------------------------------+

Text :ref:`Color<class_Color>` used when the ``MenuButton`` is being hovered.

----

.. _class_MenuButton_theme_color_font_color_pressed:

- :ref:`Color<class_Color>` **font_color_pressed**

+-----------+-------------------------+
| *Default* | ``Color( 1, 1, 1, 1 )`` |
+-----------+-------------------------+

Text :ref:`Color<class_Color>` used when the ``MenuButton`` is being pressed.

----

.. _class_MenuButton_theme_constant_hseparation:

- :ref:`int<class_int>` **hseparation**

+-----------+-------+
| *Default* | ``3`` |
+-----------+-------+

The horizontal space between ``MenuButton``'s icon and text.

----

.. _class_MenuButton_theme_font_font:

- :ref:`Font<class_Font>` **font**

:ref:`Font<class_Font>` of the ``MenuButton``'s text.

----

.. _class_MenuButton_theme_style_disabled:

- :ref:`StyleBox<class_StyleBox>` **disabled**

:ref:`StyleBox<class_StyleBox>` used when the ``MenuButton`` is disabled.

----

.. _class_MenuButton_theme_style_focus:

- :ref:`StyleBox<class_StyleBox>` **focus**

:ref:`StyleBox<class_StyleBox>` used when the ``MenuButton`` is focused. It is displayed over the current :ref:`StyleBox<class_StyleBox>`, so using :ref:`StyleBoxEmpty<class_StyleBoxEmpty>` will just disable the focus visual effect.

----

.. _class_MenuButton_theme_style_hover:

- :ref:`StyleBox<class_StyleBox>` **hover**

:ref:`StyleBox<class_StyleBox>` used when the ``MenuButton`` is being hovered.

----

.. _class_MenuButton_theme_style_normal:

- :ref:`StyleBox<class_StyleBox>` **normal**

Default :ref:`StyleBox<class_StyleBox>` for the ``MenuButton``.

----

.. _class_MenuButton_theme_style_pressed:

- :ref:`StyleBox<class_StyleBox>` **pressed**

:ref:`StyleBox<class_StyleBox>` used when the ``MenuButton`` is being pressed.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
