:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the StyleBox.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_StyleBox:

StyleBox
========

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`StyleBoxEmpty<class_StyleBoxEmpty>`, :ref:`StyleBoxFlat<class_StyleBoxFlat>`, :ref:`StyleBoxLine<class_StyleBoxLine>`, :ref:`StyleBoxTexture<class_StyleBoxTexture>`

Base class for drawing stylized boxes for the UI.

Description
-----------

StyleBox is :ref:`Resource<class_Resource>` that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.

**Note:** For children of :ref:`Control<class_Control>` that have *Theme Properties*, the ``focus`` ``StyleBox`` is displayed over the ``normal``, ``hover`` or ``pressed`` ``StyleBox``. This makes the ``focus`` ``StyleBox`` more reusable across different nodes.

Properties
----------

+---------------------------+-----------------------------------------------------------------------------+----------+
| :ref:`float<class_float>` | :ref:`content_margin_bottom<class_StyleBox_property_content_margin_bottom>` | ``-1.0`` |
+---------------------------+-----------------------------------------------------------------------------+----------+
| :ref:`float<class_float>` | :ref:`content_margin_left<class_StyleBox_property_content_margin_left>`     | ``-1.0`` |
+---------------------------+-----------------------------------------------------------------------------+----------+
| :ref:`float<class_float>` | :ref:`content_margin_right<class_StyleBox_property_content_margin_right>`   | ``-1.0`` |
+---------------------------+-----------------------------------------------------------------------------+----------+
| :ref:`float<class_float>` | :ref:`content_margin_top<class_StyleBox_property_content_margin_top>`       | ``-1.0`` |
+---------------------------+-----------------------------------------------------------------------------+----------+

Methods
-------

+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`draw<class_StyleBox_method_draw>` **(** :ref:`RID<class_RID>` canvas_item, :ref:`Rect2<class_Rect2>` rect **)** |const|                                    |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`       | :ref:`get_center_size<class_StyleBox_method_get_center_size>` **(** **)** |const|                                                                                |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`CanvasItem<class_CanvasItem>` | :ref:`get_current_item_drawn<class_StyleBox_method_get_current_item_drawn>` **(** **)** |const|                                                                  |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`get_default_margin<class_StyleBox_method_get_default_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|                           |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`           | :ref:`get_margin<class_StyleBox_method_get_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|                                           |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`       | :ref:`get_minimum_size<class_StyleBox_method_get_minimum_size>` **(** **)** |const|                                                                              |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`       | :ref:`get_offset<class_StyleBox_method_get_offset>` **(** **)** |const|                                                                                          |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`set_default_margin<class_StyleBox_method_set_default_margin>` **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` offset **)** |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`test_mask<class_StyleBox_method_test_mask>` **(** :ref:`Vector2<class_Vector2>` point, :ref:`Rect2<class_Rect2>` rect **)** |const|                        |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_StyleBox_property_content_margin_bottom:

- :ref:`float<class_float>` **content_margin_bottom**

+-----------+---------------------------+
| *Default* | ``-1.0``                  |
+-----------+---------------------------+
| *Setter*  | set_default_margin(value) |
+-----------+---------------------------+
| *Getter*  | get_default_margin()      |
+-----------+---------------------------+

The bottom margin for the contents of this style box. Increasing this value reduces the space available to the contents from the bottom.

If this value is negative, it is ignored and a child-specific margin is used instead. For example for :ref:`StyleBoxFlat<class_StyleBoxFlat>` the border thickness (if any) is used instead.

It is up to the code using this style box to decide what these contents are: for example, a :ref:`Button<class_Button>` respects this content margin for the textual contents of the button.

:ref:`get_margin<class_StyleBox_method_get_margin>` should be used to fetch this value as consumer instead of reading these properties directly. This is because it correctly respects negative values and the fallback mentioned above.

----

.. _class_StyleBox_property_content_margin_left:

- :ref:`float<class_float>` **content_margin_left**

+-----------+---------------------------+
| *Default* | ``-1.0``                  |
+-----------+---------------------------+
| *Setter*  | set_default_margin(value) |
+-----------+---------------------------+
| *Getter*  | get_default_margin()      |
+-----------+---------------------------+

The left margin for the contents of this style box.	Increasing this value reduces the space available to the contents from the left.

Refer to :ref:`content_margin_bottom<class_StyleBox_property_content_margin_bottom>` for extra considerations.

----

.. _class_StyleBox_property_content_margin_right:

- :ref:`float<class_float>` **content_margin_right**

+-----------+---------------------------+
| *Default* | ``-1.0``                  |
+-----------+---------------------------+
| *Setter*  | set_default_margin(value) |
+-----------+---------------------------+
| *Getter*  | get_default_margin()      |
+-----------+---------------------------+

The right margin for the contents of this style box. Increasing this value reduces the space available to the contents from the right.

Refer to :ref:`content_margin_bottom<class_StyleBox_property_content_margin_bottom>` for extra considerations.

----

.. _class_StyleBox_property_content_margin_top:

- :ref:`float<class_float>` **content_margin_top**

+-----------+---------------------------+
| *Default* | ``-1.0``                  |
+-----------+---------------------------+
| *Setter*  | set_default_margin(value) |
+-----------+---------------------------+
| *Getter*  | get_default_margin()      |
+-----------+---------------------------+

The top margin for the contents of this style box. Increasing this value reduces the space available to the contents from the top.

Refer to :ref:`content_margin_bottom<class_StyleBox_property_content_margin_bottom>` for extra considerations.

Method Descriptions
-------------------

.. _class_StyleBox_method_draw:

- void **draw** **(** :ref:`RID<class_RID>` canvas_item, :ref:`Rect2<class_Rect2>` rect **)** |const|

Draws this stylebox using a :ref:`CanvasItem<class_CanvasItem>` with given :ref:`RID<class_RID>`.

You can get a :ref:`RID<class_RID>` value using :ref:`Object.get_instance_id<class_Object_method_get_instance_id>` on a :ref:`CanvasItem<class_CanvasItem>`-derived node.

----

.. _class_StyleBox_method_get_center_size:

- :ref:`Vector2<class_Vector2>` **get_center_size** **(** **)** |const|

Returns the size of this ``StyleBox`` without the margins.

----

.. _class_StyleBox_method_get_current_item_drawn:

- :ref:`CanvasItem<class_CanvasItem>` **get_current_item_drawn** **(** **)** |const|

Returns the :ref:`CanvasItem<class_CanvasItem>` that handles its :ref:`CanvasItem.NOTIFICATION_DRAW<class_CanvasItem_constant_NOTIFICATION_DRAW>` or :ref:`CanvasItem._draw<class_CanvasItem_method__draw>` callback at this moment.

----

.. _class_StyleBox_method_get_default_margin:

- :ref:`float<class_float>` **get_default_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|

Returns the default value of the specified :ref:`Margin<enum_@GlobalScope_Margin>`.

----

.. _class_StyleBox_method_get_margin:

- :ref:`float<class_float>` **get_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin **)** |const|

Returns the content margin offset for the specified :ref:`Margin<enum_@GlobalScope_Margin>`.

Positive values reduce size inwards, unlike :ref:`Control<class_Control>`'s margin values.

----

.. _class_StyleBox_method_get_minimum_size:

- :ref:`Vector2<class_Vector2>` **get_minimum_size** **(** **)** |const|

Returns the minimum size that this stylebox can be shrunk to.

----

.. _class_StyleBox_method_get_offset:

- :ref:`Vector2<class_Vector2>` **get_offset** **(** **)** |const|

Returns the "offset" of a stylebox. This helper function returns a value equivalent to ``Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))``.

----

.. _class_StyleBox_method_set_default_margin:

- void **set_default_margin** **(** :ref:`Margin<enum_@GlobalScope_Margin>` margin, :ref:`float<class_float>` offset **)**

Sets the default value of the specified :ref:`Margin<enum_@GlobalScope_Margin>` to given ``offset`` in pixels.

----

.. _class_StyleBox_method_test_mask:

- :ref:`bool<class_bool>` **test_mask** **(** :ref:`Vector2<class_Vector2>` point, :ref:`Rect2<class_Rect2>` rect **)** |const|

Test a position in a rectangle, return whether it passes the mask test.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
