:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the EditorInspector.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_EditorInspector:

EditorInspector
===============

**Inherits:** :ref:`ScrollContainer<class_ScrollContainer>` **<** :ref:`Container<class_Container>` **<** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

A tab used to edit properties of the selected node.

Description
-----------

The editor inspector is by default located on the right-hand side of the editor. It's used to edit the properties of the selected node. For example, you can select a node such as :ref:`Sprite<class_Sprite>` then edit its transform through the inspector tool. The editor inspector is an essential tool in the game development workflow.

**Note:** This class shouldn't be instantiated directly. Instead, access the singleton using :ref:`EditorInterface.get_inspector<class_EditorInterface_method_get_inspector>`.

Properties
----------

+-------------------------+---------------------------+-------------------------------+
| :ref:`bool<class_bool>` | scroll_horizontal_enabled | ``false`` *(parent override)* |
+-------------------------+---------------------------+-------------------------------+

Methods
-------

+------+------------------------------------------------------------------+
| void | :ref:`refresh<class_EditorInspector_method_refresh>` **(** **)** |
+------+------------------------------------------------------------------+

Signals
-------

.. _class_EditorInspector_signal_object_id_selected:

- **object_id_selected** **(** :ref:`int<class_int>` id **)**

Emitted when the Edit button of an :ref:`Object<class_Object>` has been pressed in the inspector. This is mainly used in the remote scene tree inspector.

----

.. _class_EditorInspector_signal_property_edited:

- **property_edited** **(** :ref:`String<class_String>` property **)**

Emitted when a property is edited in the inspector.

----

.. _class_EditorInspector_signal_property_keyed:

- **property_keyed** **(** :ref:`String<class_String>` property **)**

Emitted when a property is keyed in the inspector. Properties can be keyed by clicking the "key" icon next to a property when the Animation panel is toggled.

----

.. _class_EditorInspector_signal_property_selected:

- **property_selected** **(** :ref:`String<class_String>` property **)**

Emitted when a property is selected in the inspector.

----

.. _class_EditorInspector_signal_property_toggled:

- **property_toggled** **(** :ref:`String<class_String>` property, :ref:`bool<class_bool>` checked **)**

Emitted when a boolean property is toggled in the inspector.

**Note:** This signal is never emitted if the internal ``autoclear`` property enabled. Since this property is always enabled in the editor inspector, this signal is never emitted by the editor itself.

----

.. _class_EditorInspector_signal_resource_selected:

- **resource_selected** **(** :ref:`Object<class_Object>` res, :ref:`String<class_String>` prop **)**

Emitted when a resource is selected in the inspector.

----

.. _class_EditorInspector_signal_restart_requested:

- **restart_requested** **(** **)**

Emitted when a property that requires a restart to be applied is edited in the inspector. This is only used in the Project Settings and Editor Settings.

Method Descriptions
-------------------

.. _class_EditorInspector_method_refresh:

- void **refresh** **(** **)**

Refreshes the inspector.

**Note:** To save on CPU resources, calling this method will do nothing if the time specified in ``docks/property_editor/auto_refresh_interval`` editor setting hasn't passed yet since this method was last called. (By default, this interval is set to 0.3 seconds.)

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
