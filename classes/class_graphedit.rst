:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the GraphEdit.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_GraphEdit:

GraphEdit
=========

**Inherits:** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

GraphEdit is an area capable of showing various GraphNodes. It manages connection events between them.

Description
-----------

GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNode slots is disabled by default.

It is greatly advised to enable low-processor usage mode (see :ref:`OS.low_processor_usage_mode<class_OS_property_low_processor_usage_mode>`) when using GraphEdits.

Properties
----------

+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`FocusMode<enum_Control_FocusMode>` | focus_mode                                                           | ``2`` *(parent override)*    |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`bool<class_bool>`                  | :ref:`minimap_enabled<class_GraphEdit_property_minimap_enabled>`     | ``true``                     |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`float<class_float>`                | :ref:`minimap_opacity<class_GraphEdit_property_minimap_opacity>`     | ``0.65``                     |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`Vector2<class_Vector2>`            | :ref:`minimap_size<class_GraphEdit_property_minimap_size>`           | ``Vector2( 240, 160 )``      |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`bool<class_bool>`                  | rect_clip_content                                                    | ``true`` *(parent override)* |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`bool<class_bool>`                  | :ref:`right_disconnects<class_GraphEdit_property_right_disconnects>` | ``false``                    |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`Vector2<class_Vector2>`            | :ref:`scroll_offset<class_GraphEdit_property_scroll_offset>`         | ``Vector2( 0, 0 )``          |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`bool<class_bool>`                  | :ref:`show_zoom_label<class_GraphEdit_property_show_zoom_label>`     | ``false``                    |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`int<class_int>`                    | :ref:`snap_distance<class_GraphEdit_property_snap_distance>`         | ``20``                       |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`bool<class_bool>`                  | :ref:`use_snap<class_GraphEdit_property_use_snap>`                   | ``true``                     |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`float<class_float>`                | :ref:`zoom<class_GraphEdit_property_zoom>`                           | ``1.0``                      |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`float<class_float>`                | :ref:`zoom_max<class_GraphEdit_property_zoom_max>`                   | ``2.0736``                   |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`float<class_float>`                | :ref:`zoom_min<class_GraphEdit_property_zoom_min>`                   | ``0.232568``                 |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+
| :ref:`float<class_float>`                | :ref:`zoom_step<class_GraphEdit_property_zoom_step>`                 | ``1.2``                      |
+------------------------------------------+----------------------------------------------------------------------+------------------------------+

Methods
-------

+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`add_valid_connection_type<class_GraphEdit_method_add_valid_connection_type>` **(** :ref:`int<class_int>` from_type, :ref:`int<class_int>` to_type **)**                                                                                                 |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`add_valid_left_disconnect_type<class_GraphEdit_method_add_valid_left_disconnect_type>` **(** :ref:`int<class_int>` type **)**                                                                                                                           |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`add_valid_right_disconnect_type<class_GraphEdit_method_add_valid_right_disconnect_type>` **(** :ref:`int<class_int>` type **)**                                                                                                                         |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`clear_connections<class_GraphEdit_method_clear_connections>` **(** **)**                                                                                                                                                                                |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`connect_node<class_GraphEdit_method_connect_node>` **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_port, :ref:`String<class_String>` to, :ref:`int<class_int>` to_port **)**                                                         |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`disconnect_node<class_GraphEdit_method_disconnect_node>` **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_port, :ref:`String<class_String>` to, :ref:`int<class_int>` to_port **)**                                                   |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`                 | :ref:`get_connection_list<class_GraphEdit_method_get_connection_list>` **(** **)** |const|                                                                                                                                                                    |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`HBoxContainer<class_HBoxContainer>` | :ref:`get_zoom_hbox<class_GraphEdit_method_get_zoom_hbox>` **(** **)**                                                                                                                                                                                        |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_node_connected<class_GraphEdit_method_is_node_connected>` **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_port, :ref:`String<class_String>` to, :ref:`int<class_int>` to_port **)**                                               |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_valid_connection_type<class_GraphEdit_method_is_valid_connection_type>` **(** :ref:`int<class_int>` from_type, :ref:`int<class_int>` to_type **)** |const|                                                                                           |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`remove_valid_connection_type<class_GraphEdit_method_remove_valid_connection_type>` **(** :ref:`int<class_int>` from_type, :ref:`int<class_int>` to_type **)**                                                                                           |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`remove_valid_left_disconnect_type<class_GraphEdit_method_remove_valid_left_disconnect_type>` **(** :ref:`int<class_int>` type **)**                                                                                                                     |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`remove_valid_right_disconnect_type<class_GraphEdit_method_remove_valid_right_disconnect_type>` **(** :ref:`int<class_int>` type **)**                                                                                                                   |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`set_connection_activity<class_GraphEdit_method_set_connection_activity>` **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_port, :ref:`String<class_String>` to, :ref:`int<class_int>` to_port, :ref:`float<class_float>` amount **)** |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`set_selected<class_GraphEdit_method_set_selected>` **(** :ref:`Node<class_Node>` node **)**                                                                                                                                                             |
+-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Theme Properties
----------------

+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Color<class_Color>`       | :ref:`activity<class_GraphEdit_theme_color_activity>`                                              | ``Color( 1, 1, 1, 1 )``    |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Color<class_Color>`       | :ref:`grid_major<class_GraphEdit_theme_color_grid_major>`                                          | ``Color( 1, 1, 1, 0.2 )``  |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Color<class_Color>`       | :ref:`grid_minor<class_GraphEdit_theme_color_grid_minor>`                                          | ``Color( 1, 1, 1, 0.05 )`` |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Color<class_Color>`       | :ref:`selection_fill<class_GraphEdit_theme_color_selection_fill>`                                  | ``Color( 1, 1, 1, 0.3 )``  |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Color<class_Color>`       | :ref:`selection_stroke<class_GraphEdit_theme_color_selection_stroke>`                              | ``Color( 1, 1, 1, 0.8 )``  |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`int<class_int>`           | :ref:`bezier_len_neg<class_GraphEdit_theme_constant_bezier_len_neg>`                               | ``160``                    |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`int<class_int>`           | :ref:`bezier_len_pos<class_GraphEdit_theme_constant_bezier_len_pos>`                               | ``80``                     |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`int<class_int>`           | :ref:`port_grab_distance_horizontal<class_GraphEdit_theme_constant_port_grab_distance_horizontal>` | ``24``                     |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`int<class_int>`           | :ref:`port_grab_distance_vertical<class_GraphEdit_theme_constant_port_grab_distance_vertical>`     | ``26``                     |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture<class_Texture>`   | :ref:`minimap<class_GraphEdit_theme_icon_minimap>`                                                 |                            |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture<class_Texture>`   | :ref:`minus<class_GraphEdit_theme_icon_minus>`                                                     |                            |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture<class_Texture>`   | :ref:`more<class_GraphEdit_theme_icon_more>`                                                       |                            |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture<class_Texture>`   | :ref:`reset<class_GraphEdit_theme_icon_reset>`                                                     |                            |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`Texture<class_Texture>`   | :ref:`snap<class_GraphEdit_theme_icon_snap>`                                                       |                            |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+
| :ref:`StyleBox<class_StyleBox>` | :ref:`bg<class_GraphEdit_theme_style_bg>`                                                          |                            |
+---------------------------------+----------------------------------------------------------------------------------------------------+----------------------------+

Signals
-------

.. _class_GraphEdit_signal__begin_node_move:

- **_begin_node_move** **(** **)**

Emitted at the beginning of a GraphNode movement.

----

.. _class_GraphEdit_signal__end_node_move:

- **_end_node_move** **(** **)**

Emitted at the end of a GraphNode movement.

----

.. _class_GraphEdit_signal_connection_from_empty:

- **connection_from_empty** **(** :ref:`String<class_String>` to, :ref:`int<class_int>` to_slot, :ref:`Vector2<class_Vector2>` release_position **)**

Emitted when user dragging connection from input port into empty space of the graph.

----

.. _class_GraphEdit_signal_connection_request:

- **connection_request** **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_slot, :ref:`String<class_String>` to, :ref:`int<class_int>` to_slot **)**

Emitted to the GraphEdit when the connection between the ``from_slot`` slot of the ``from`` GraphNode and the ``to_slot`` slot of the ``to`` GraphNode is attempted to be created.

----

.. _class_GraphEdit_signal_connection_to_empty:

- **connection_to_empty** **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_slot, :ref:`Vector2<class_Vector2>` release_position **)**

Emitted when user dragging connection from output port into empty space of the graph.

----

.. _class_GraphEdit_signal_copy_nodes_request:

- **copy_nodes_request** **(** **)**

Emitted when the user presses ``Ctrl + C``.

----

.. _class_GraphEdit_signal_delete_nodes_request:

- **delete_nodes_request** **(** **)**

Emitted when a GraphNode is attempted to be removed from the GraphEdit.

----

.. _class_GraphEdit_signal_disconnection_request:

- **disconnection_request** **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_slot, :ref:`String<class_String>` to, :ref:`int<class_int>` to_slot **)**

Emitted to the GraphEdit when the connection between ``from_slot`` slot of ``from`` GraphNode and ``to_slot`` slot of ``to`` GraphNode is attempted to be removed.

----

.. _class_GraphEdit_signal_duplicate_nodes_request:

- **duplicate_nodes_request** **(** **)**

Emitted when a GraphNode is attempted to be duplicated in the GraphEdit.

----

.. _class_GraphEdit_signal_node_selected:

- **node_selected** **(** :ref:`Node<class_Node>` node **)**

Emitted when a GraphNode is selected.

----

.. _class_GraphEdit_signal_node_unselected:

- **node_unselected** **(** :ref:`Node<class_Node>` node **)**

----

.. _class_GraphEdit_signal_paste_nodes_request:

- **paste_nodes_request** **(** **)**

Emitted when the user presses ``Ctrl + V``.

----

.. _class_GraphEdit_signal_popup_request:

- **popup_request** **(** :ref:`Vector2<class_Vector2>` position **)**

Emitted when a popup is requested. Happens on right-clicking in the GraphEdit. ``position`` is the position of the mouse pointer when the signal is sent.

----

.. _class_GraphEdit_signal_scroll_offset_changed:

- **scroll_offset_changed** **(** :ref:`Vector2<class_Vector2>` ofs **)**

Emitted when the scroll offset is changed by the user. It will not be emitted when changed in code.

Property Descriptions
---------------------

.. _class_GraphEdit_property_minimap_enabled:

- :ref:`bool<class_bool>` **minimap_enabled**

+-----------+----------------------------+
| *Default* | ``true``                   |
+-----------+----------------------------+
| *Setter*  | set_minimap_enabled(value) |
+-----------+----------------------------+
| *Getter*  | is_minimap_enabled()       |
+-----------+----------------------------+

If ``true``, the minimap is visible.

----

.. _class_GraphEdit_property_minimap_opacity:

- :ref:`float<class_float>` **minimap_opacity**

+-----------+----------------------------+
| *Default* | ``0.65``                   |
+-----------+----------------------------+
| *Setter*  | set_minimap_opacity(value) |
+-----------+----------------------------+
| *Getter*  | get_minimap_opacity()      |
+-----------+----------------------------+

The opacity of the minimap rectangle.

----

.. _class_GraphEdit_property_minimap_size:

- :ref:`Vector2<class_Vector2>` **minimap_size**

+-----------+-------------------------+
| *Default* | ``Vector2( 240, 160 )`` |
+-----------+-------------------------+
| *Setter*  | set_minimap_size(value) |
+-----------+-------------------------+
| *Getter*  | get_minimap_size()      |
+-----------+-------------------------+

The size of the minimap rectangle. The map itself is based on the size of the grid area and is scaled to fit this rectangle.

----

.. _class_GraphEdit_property_right_disconnects:

- :ref:`bool<class_bool>` **right_disconnects**

+-----------+--------------------------------+
| *Default* | ``false``                      |
+-----------+--------------------------------+
| *Setter*  | set_right_disconnects(value)   |
+-----------+--------------------------------+
| *Getter*  | is_right_disconnects_enabled() |
+-----------+--------------------------------+

If ``true``, enables disconnection of existing connections in the GraphEdit by dragging the right end.

----

.. _class_GraphEdit_property_scroll_offset:

- :ref:`Vector2<class_Vector2>` **scroll_offset**

+-----------+-----------------------+
| *Default* | ``Vector2( 0, 0 )``   |
+-----------+-----------------------+
| *Setter*  | set_scroll_ofs(value) |
+-----------+-----------------------+
| *Getter*  | get_scroll_ofs()      |
+-----------+-----------------------+

The scroll offset.

----

.. _class_GraphEdit_property_show_zoom_label:

- :ref:`bool<class_bool>` **show_zoom_label**

+-----------+----------------------------+
| *Default* | ``false``                  |
+-----------+----------------------------+
| *Setter*  | set_show_zoom_label(value) |
+-----------+----------------------------+
| *Getter*  | is_showing_zoom_label()    |
+-----------+----------------------------+

If ``true``, makes a label with the current zoom level visible. The zoom value is displayed in percents.

----

.. _class_GraphEdit_property_snap_distance:

- :ref:`int<class_int>` **snap_distance**

+-----------+-----------------+
| *Default* | ``20``          |
+-----------+-----------------+
| *Setter*  | set_snap(value) |
+-----------+-----------------+
| *Getter*  | get_snap()      |
+-----------+-----------------+

The snapping distance in pixels.

----

.. _class_GraphEdit_property_use_snap:

- :ref:`bool<class_bool>` **use_snap**

+-----------+---------------------+
| *Default* | ``true``            |
+-----------+---------------------+
| *Setter*  | set_use_snap(value) |
+-----------+---------------------+
| *Getter*  | is_using_snap()     |
+-----------+---------------------+

If ``true``, enables snapping.

----

.. _class_GraphEdit_property_zoom:

- :ref:`float<class_float>` **zoom**

+-----------+-----------------+
| *Default* | ``1.0``         |
+-----------+-----------------+
| *Setter*  | set_zoom(value) |
+-----------+-----------------+
| *Getter*  | get_zoom()      |
+-----------+-----------------+

The current zoom value.

----

.. _class_GraphEdit_property_zoom_max:

- :ref:`float<class_float>` **zoom_max**

+-----------+---------------------+
| *Default* | ``2.0736``          |
+-----------+---------------------+
| *Setter*  | set_zoom_max(value) |
+-----------+---------------------+
| *Getter*  | get_zoom_max()      |
+-----------+---------------------+

The upper zoom limit.

----

.. _class_GraphEdit_property_zoom_min:

- :ref:`float<class_float>` **zoom_min**

+-----------+---------------------+
| *Default* | ``0.232568``        |
+-----------+---------------------+
| *Setter*  | set_zoom_min(value) |
+-----------+---------------------+
| *Getter*  | get_zoom_min()      |
+-----------+---------------------+

The lower zoom limit.

----

.. _class_GraphEdit_property_zoom_step:

- :ref:`float<class_float>` **zoom_step**

+-----------+----------------------+
| *Default* | ``1.2``              |
+-----------+----------------------+
| *Setter*  | set_zoom_step(value) |
+-----------+----------------------+
| *Getter*  | get_zoom_step()      |
+-----------+----------------------+

The step of each zoom level.

Method Descriptions
-------------------

.. _class_GraphEdit_method_add_valid_connection_type:

- void **add_valid_connection_type** **(** :ref:`int<class_int>` from_type, :ref:`int<class_int>` to_type **)**

Makes possible the connection between two different slot types. The type is defined with the :ref:`GraphNode.set_slot<class_GraphNode_method_set_slot>` method.

----

.. _class_GraphEdit_method_add_valid_left_disconnect_type:

- void **add_valid_left_disconnect_type** **(** :ref:`int<class_int>` type **)**

Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type.

----

.. _class_GraphEdit_method_add_valid_right_disconnect_type:

- void **add_valid_right_disconnect_type** **(** :ref:`int<class_int>` type **)**

Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type.

----

.. _class_GraphEdit_method_clear_connections:

- void **clear_connections** **(** **)**

Removes all connections between nodes.

----

.. _class_GraphEdit_method_connect_node:

- :ref:`Error<enum_@GlobalScope_Error>` **connect_node** **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_port, :ref:`String<class_String>` to, :ref:`int<class_int>` to_port **)**

Create a connection between the ``from_port`` slot of the ``from`` GraphNode and the ``to_port`` slot of the ``to`` GraphNode. If the connection already exists, no connection is created.

----

.. _class_GraphEdit_method_disconnect_node:

- void **disconnect_node** **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_port, :ref:`String<class_String>` to, :ref:`int<class_int>` to_port **)**

Removes the connection between the ``from_port`` slot of the ``from`` GraphNode and the ``to_port`` slot of the ``to`` GraphNode. If the connection does not exist, no connection is removed.

----

.. _class_GraphEdit_method_get_connection_list:

- :ref:`Array<class_Array>` **get_connection_list** **(** **)** |const|

Returns an Array containing the list of connections. A connection consists in a structure of the form ``{ from_port: 0, from: "GraphNode name 0", to_port: 1, to: "GraphNode name 1" }``.

----

.. _class_GraphEdit_method_get_zoom_hbox:

- :ref:`HBoxContainer<class_HBoxContainer>` **get_zoom_hbox** **(** **)**

Gets the :ref:`HBoxContainer<class_HBoxContainer>` that contains the zooming and grid snap controls in the top left of the graph. You can use this method to reposition the toolbar or to add your own custom controls to it.

**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their :ref:`CanvasItem.visible<class_CanvasItem_property_visible>` property.

----

.. _class_GraphEdit_method_is_node_connected:

- :ref:`bool<class_bool>` **is_node_connected** **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_port, :ref:`String<class_String>` to, :ref:`int<class_int>` to_port **)**

Returns ``true`` if the ``from_port`` slot of the ``from`` GraphNode is connected to the ``to_port`` slot of the ``to`` GraphNode.

----

.. _class_GraphEdit_method_is_valid_connection_type:

- :ref:`bool<class_bool>` **is_valid_connection_type** **(** :ref:`int<class_int>` from_type, :ref:`int<class_int>` to_type **)** |const|

Returns whether it's possible to connect slots of the specified types.

----

.. _class_GraphEdit_method_remove_valid_connection_type:

- void **remove_valid_connection_type** **(** :ref:`int<class_int>` from_type, :ref:`int<class_int>` to_type **)**

Makes it not possible to connect between two different slot types. The type is defined with the :ref:`GraphNode.set_slot<class_GraphNode_method_set_slot>` method.

----

.. _class_GraphEdit_method_remove_valid_left_disconnect_type:

- void **remove_valid_left_disconnect_type** **(** :ref:`int<class_int>` type **)**

Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type.

----

.. _class_GraphEdit_method_remove_valid_right_disconnect_type:

- void **remove_valid_right_disconnect_type** **(** :ref:`int<class_int>` type **)**

Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type.

----

.. _class_GraphEdit_method_set_connection_activity:

- void **set_connection_activity** **(** :ref:`String<class_String>` from, :ref:`int<class_int>` from_port, :ref:`String<class_String>` to, :ref:`int<class_int>` to_port, :ref:`float<class_float>` amount **)**

Sets the coloration of the connection between ``from``'s ``from_port`` and ``to``'s ``to_port`` with the color provided in the ``activity`` theme property.

----

.. _class_GraphEdit_method_set_selected:

- void **set_selected** **(** :ref:`Node<class_Node>` node **)**

Sets the specified ``node`` as the one selected.

Theme Property Descriptions
---------------------------

.. _class_GraphEdit_theme_color_activity:

- :ref:`Color<class_Color>` **activity**

+-----------+-------------------------+
| *Default* | ``Color( 1, 1, 1, 1 )`` |
+-----------+-------------------------+

----

.. _class_GraphEdit_theme_color_grid_major:

- :ref:`Color<class_Color>` **grid_major**

+-----------+---------------------------+
| *Default* | ``Color( 1, 1, 1, 0.2 )`` |
+-----------+---------------------------+

Color of major grid lines.

----

.. _class_GraphEdit_theme_color_grid_minor:

- :ref:`Color<class_Color>` **grid_minor**

+-----------+----------------------------+
| *Default* | ``Color( 1, 1, 1, 0.05 )`` |
+-----------+----------------------------+

Color of minor grid lines.

----

.. _class_GraphEdit_theme_color_selection_fill:

- :ref:`Color<class_Color>` **selection_fill**

+-----------+---------------------------+
| *Default* | ``Color( 1, 1, 1, 0.3 )`` |
+-----------+---------------------------+

The fill color of the selection rectangle.

----

.. _class_GraphEdit_theme_color_selection_stroke:

- :ref:`Color<class_Color>` **selection_stroke**

+-----------+---------------------------+
| *Default* | ``Color( 1, 1, 1, 0.8 )`` |
+-----------+---------------------------+

The outline color of the selection rectangle.

----

.. _class_GraphEdit_theme_constant_bezier_len_neg:

- :ref:`int<class_int>` **bezier_len_neg**

+-----------+---------+
| *Default* | ``160`` |
+-----------+---------+

----

.. _class_GraphEdit_theme_constant_bezier_len_pos:

- :ref:`int<class_int>` **bezier_len_pos**

+-----------+--------+
| *Default* | ``80`` |
+-----------+--------+

----

.. _class_GraphEdit_theme_constant_port_grab_distance_horizontal:

- :ref:`int<class_int>` **port_grab_distance_horizontal**

+-----------+--------+
| *Default* | ``24`` |
+-----------+--------+

The horizontal range within which a port can be grabbed (on both sides).

----

.. _class_GraphEdit_theme_constant_port_grab_distance_vertical:

- :ref:`int<class_int>` **port_grab_distance_vertical**

+-----------+--------+
| *Default* | ``26`` |
+-----------+--------+

The vertical range within which a port can be grabbed (on both sides).

----

.. _class_GraphEdit_theme_icon_minimap:

- :ref:`Texture<class_Texture>` **minimap**

----

.. _class_GraphEdit_theme_icon_minus:

- :ref:`Texture<class_Texture>` **minus**

The icon for the zoom out button.

----

.. _class_GraphEdit_theme_icon_more:

- :ref:`Texture<class_Texture>` **more**

The icon for the zoom in button.

----

.. _class_GraphEdit_theme_icon_reset:

- :ref:`Texture<class_Texture>` **reset**

The icon for the zoom reset button.

----

.. _class_GraphEdit_theme_icon_snap:

- :ref:`Texture<class_Texture>` **snap**

The icon for the snap toggle button.

----

.. _class_GraphEdit_theme_style_bg:

- :ref:`StyleBox<class_StyleBox>` **bg**

The background drawn under the grid.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
