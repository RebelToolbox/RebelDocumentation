:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the TCP_Server.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_TCP_Server:

TCP_Server
==========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

A TCP server.

Description
-----------

A TCP server. Listens to connections on a port and returns a :ref:`StreamPeerTCP<class_StreamPeerTCP>` when it gets an incoming connection.

Methods
-------

+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_connection_available<class_TCP_Server_method_is_connection_available>` **(** **)** |const|                                |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                   | :ref:`is_listening<class_TCP_Server_method_is_listening>` **(** **)** |const|                                                      |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`listen<class_TCP_Server_method_listen>` **(** :ref:`int<class_int>` port, :ref:`String<class_String>` bind_address="*" **)** |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`stop<class_TCP_Server_method_stop>` **(** **)**                                                                              |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`StreamPeerTCP<class_StreamPeerTCP>` | :ref:`take_connection<class_TCP_Server_method_take_connection>` **(** **)**                                                        |
+-------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_TCP_Server_method_is_connection_available:

- :ref:`bool<class_bool>` **is_connection_available** **(** **)** |const|

Returns ``true`` if a connection is available for taking.

----

.. _class_TCP_Server_method_is_listening:

- :ref:`bool<class_bool>` **is_listening** **(** **)** |const|

Returns ``true`` if the server is currently listening for connections.

----

.. _class_TCP_Server_method_listen:

- :ref:`Error<enum_@GlobalScope_Error>` **listen** **(** :ref:`int<class_int>` port, :ref:`String<class_String>` bind_address="*" **)**

Listen on the ``port`` binding to ``bind_address``.

If ``bind_address`` is set as ``"*"`` (default), the server will listen on all available addresses (both IPv4 and IPv6).

If ``bind_address`` is set as ``"0.0.0.0"`` (for IPv4) or ``"::"`` (for IPv6), the server will listen on all available addresses matching that IP type.

If ``bind_address`` is set to any valid address (e.g. ``"192.168.1.101"``, ``"::1"``, etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).

----

.. _class_TCP_Server_method_stop:

- void **stop** **(** **)**

Stops listening.

----

.. _class_TCP_Server_method_take_connection:

- :ref:`StreamPeerTCP<class_StreamPeerTCP>` **take_connection** **(** **)**

If a connection is available, returns a StreamPeerTCP with the connection.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
