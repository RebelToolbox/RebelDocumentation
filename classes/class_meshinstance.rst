:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the MeshInstance.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_MeshInstance:

MeshInstance
============

**Inherits:** :ref:`GeometryInstance<class_GeometryInstance>` **<** :ref:`VisualInstance<class_VisualInstance>` **<** :ref:`CullInstance<class_CullInstance>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`SoftBody<class_SoftBody>`

Node that instances meshes into a scenario.

Description
-----------

MeshInstance is a node that takes a :ref:`Mesh<class_Mesh>` resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single :ref:`Mesh<class_Mesh>` in many places. This allows to reuse geometry and save on resources. When a :ref:`Mesh<class_Mesh>` has to be instanced more than thousands of times at close proximity, consider using a :ref:`MultiMesh<class_MultiMesh>` in a :ref:`MultiMeshInstance<class_MultiMeshInstance>` instead.

Tutorials
---------

- `3D Material Testers Demo <https://godotengine.org/asset-library/asset/123>`__

- `3D Kinematic Character Demo <https://godotengine.org/asset-library/asset/126>`__

- `3D Platformer Demo <https://godotengine.org/asset-library/asset/125>`__

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

Properties
----------

+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+
| :ref:`Mesh<class_Mesh>`         | :ref:`mesh<class_MeshInstance_property_mesh>`                                                               |                    |
+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+
| :ref:`NodePath<class_NodePath>` | :ref:`skeleton<class_MeshInstance_property_skeleton>`                                                       | ``NodePath("..")`` |
+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+
| :ref:`Skin<class_Skin>`         | :ref:`skin<class_MeshInstance_property_skin>`                                                               |                    |
+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+
| :ref:`bool<class_bool>`         | :ref:`software_skinning_transform_normals<class_MeshInstance_property_software_skinning_transform_normals>` | ``true``           |
+---------------------------------+-------------------------------------------------------------------------------------------------------------+--------------------+

Methods
-------

+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_convex_collision<class_MeshInstance_method_create_convex_collision>` **(** :ref:`bool<class_bool>` clean=true, :ref:`bool<class_bool>` simplify=false **)** |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_debug_tangents<class_MeshInstance_method_create_debug_tangents>` **(** **)**                                                                                |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_multiple_convex_collisions<class_MeshInstance_method_create_multiple_convex_collisions>` **(** **)**                                                        |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`create_trimesh_collision<class_MeshInstance_method_create_trimesh_collision>` **(** **)**                                                                          |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Material<class_Material>` | :ref:`get_active_material<class_MeshInstance_method_get_active_material>` **(** :ref:`int<class_int>` surface **)** |const|                                              |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Material<class_Material>` | :ref:`get_surface_material<class_MeshInstance_method_get_surface_material>` **(** :ref:`int<class_int>` surface **)** |const|                                            |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`           | :ref:`get_surface_material_count<class_MeshInstance_method_get_surface_material_count>` **(** **)** |const|                                                              |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                            | :ref:`set_surface_material<class_MeshInstance_method_set_surface_material>` **(** :ref:`int<class_int>` surface, :ref:`Material<class_Material>` material **)**          |
+---------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_MeshInstance_property_mesh:

- :ref:`Mesh<class_Mesh>` **mesh**

+----------+-----------------+
| *Setter* | set_mesh(value) |
+----------+-----------------+
| *Getter* | get_mesh()      |
+----------+-----------------+

The :ref:`Mesh<class_Mesh>` resource for the instance.

----

.. _class_MeshInstance_property_skeleton:

- :ref:`NodePath<class_NodePath>` **skeleton**

+-----------+--------------------------+
| *Default* | ``NodePath("..")``       |
+-----------+--------------------------+
| *Setter*  | set_skeleton_path(value) |
+-----------+--------------------------+
| *Getter*  | get_skeleton_path()      |
+-----------+--------------------------+

:ref:`NodePath<class_NodePath>` to the :ref:`Skeleton<class_Skeleton>` associated with the instance.

----

.. _class_MeshInstance_property_skin:

- :ref:`Skin<class_Skin>` **skin**

+----------+-----------------+
| *Setter* | set_skin(value) |
+----------+-----------------+
| *Getter* | get_skin()      |
+----------+-----------------+

Sets the skin to be used by this instance.

----

.. _class_MeshInstance_property_software_skinning_transform_normals:

- :ref:`bool<class_bool>` **software_skinning_transform_normals**

+-----------+--------------------------------------------------+
| *Default* | ``true``                                         |
+-----------+--------------------------------------------------+
| *Setter*  | set_software_skinning_transform_normals(value)   |
+-----------+--------------------------------------------------+
| *Getter*  | is_software_skinning_transform_normals_enabled() |
+-----------+--------------------------------------------------+

If ``true``, normals are transformed when software skinning is used. Set to ``false`` when normals are not needed for better performance.

See :ref:`ProjectSettings.rendering/quality/skinning/software_skinning_fallback<class_ProjectSettings_property_rendering/quality/skinning/software_skinning_fallback>` for details about how software skinning is enabled.

Method Descriptions
-------------------

.. _class_MeshInstance_method_create_convex_collision:

- void **create_convex_collision** **(** :ref:`bool<class_bool>` clean=true, :ref:`bool<class_bool>` simplify=false **)**

This helper creates a :ref:`StaticBody<class_StaticBody>` child node with a :ref:`ConvexPolygonShape<class_ConvexPolygonShape>` collision shape calculated from the mesh geometry. It's mainly used for testing.

If ``clean`` is ``true`` (default), duplicate and interior vertices are removed automatically. You can set it to ``false`` to make the process faster if not needed.

If ``simplify`` is ``true``, the geometry can be further simplified to reduce the amount of vertices. Disabled by default.

----

.. _class_MeshInstance_method_create_debug_tangents:

- void **create_debug_tangents** **(** **)**

This helper creates a ``MeshInstance`` child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing.

----

.. _class_MeshInstance_method_create_multiple_convex_collisions:

- void **create_multiple_convex_collisions** **(** **)**

This helper creates a :ref:`StaticBody<class_StaticBody>` child node with multiple :ref:`ConvexPolygonShape<class_ConvexPolygonShape>` collision shapes calculated from the mesh geometry via convex decomposition. It's mainly used for testing.

----

.. _class_MeshInstance_method_create_trimesh_collision:

- void **create_trimesh_collision** **(** **)**

This helper creates a :ref:`StaticBody<class_StaticBody>` child node with a :ref:`ConcavePolygonShape<class_ConcavePolygonShape>` collision shape calculated from the mesh geometry. It's mainly used for testing.

----

.. _class_MeshInstance_method_get_active_material:

- :ref:`Material<class_Material>` **get_active_material** **(** :ref:`int<class_int>` surface **)** |const|

Returns the :ref:`Material<class_Material>` that will be used by the :ref:`Mesh<class_Mesh>` when drawing. This can return the :ref:`GeometryInstance.material_override<class_GeometryInstance_property_material_override>`, the surface override :ref:`Material<class_Material>` defined in this ``MeshInstance``, or the surface :ref:`Material<class_Material>` defined in the :ref:`Mesh<class_Mesh>`. For example, if :ref:`GeometryInstance.material_override<class_GeometryInstance_property_material_override>` is used, all surfaces will return the override material.

----

.. _class_MeshInstance_method_get_surface_material:

- :ref:`Material<class_Material>` **get_surface_material** **(** :ref:`int<class_int>` surface **)** |const|

Returns the :ref:`Material<class_Material>` for a surface of the :ref:`Mesh<class_Mesh>` resource.

----

.. _class_MeshInstance_method_get_surface_material_count:

- :ref:`int<class_int>` **get_surface_material_count** **(** **)** |const|

Returns the number of surface materials.

----

.. _class_MeshInstance_method_set_surface_material:

- void **set_surface_material** **(** :ref:`int<class_int>` surface, :ref:`Material<class_Material>` material **)**

Sets the :ref:`Material<class_Material>` for a surface of the :ref:`Mesh<class_Mesh>` resource.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
