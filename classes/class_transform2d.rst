:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Transform2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Transform2D:

Transform2D
===========

2D transformation (2×3 matrix).

Description
-----------

2×3 matrix (2 rows, 3 columns) used for 2D linear transformations. It can represent transformations such as translation, rotation, or scaling. It consists of three :ref:`Vector2<class_Vector2>` values: :ref:`x<class_Transform2D_property_x>`, :ref:`y<class_Transform2D_property_y>`, and the :ref:`origin<class_Transform2D_property_origin>`.

For more information, read the "Matrices and transforms" documentation article.

Tutorials
---------

- :doc:`../tutorials/math/index`

- :doc:`../tutorials/math/matrices_and_transforms`

- `Matrix Transform Demo <https://godotengine.org/asset-library/asset/584>`__

- `2.5D Demo <https://godotengine.org/asset-library/asset/583>`__

Properties
----------

+-------------------------------+--------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`origin<class_Transform2D_property_origin>` | ``Vector2( 0, 0 )`` |
+-------------------------------+--------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`x<class_Transform2D_property_x>`           | ``Vector2( 1, 0 )`` |
+-------------------------------+--------------------------------------------------+---------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`y<class_Transform2D_property_y>`           | ``Vector2( 0, 1 )`` |
+-------------------------------+--------------------------------------------------+---------------------+

Methods
-------

+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`Transform2D<class_Transform2D_method_Transform2D>` **(** :ref:`Transform<class_Transform>` from **)**                                                                           |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`Transform2D<class_Transform2D_method_Transform2D>` **(** :ref:`Vector2<class_Vector2>` x_axis, :ref:`Vector2<class_Vector2>` y_axis, :ref:`Vector2<class_Vector2>` origin **)** |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`Transform2D<class_Transform2D_method_Transform2D>` **(** :ref:`float<class_float>` rotation, :ref:`Vector2<class_Vector2>` position **)**                                       |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`affine_inverse<class_Transform2D_method_affine_inverse>` **(** **)**                                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`basis_xform<class_Transform2D_method_basis_xform>` **(** :ref:`Vector2<class_Vector2>` v **)**                                                                                  |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`basis_xform_inv<class_Transform2D_method_basis_xform_inv>` **(** :ref:`Vector2<class_Vector2>` v **)**                                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`get_origin<class_Transform2D_method_get_origin>` **(** **)**                                                                                                                    |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`             | :ref:`get_rotation<class_Transform2D_method_get_rotation>` **(** **)**                                                                                                                |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>`         | :ref:`get_scale<class_Transform2D_method_get_scale>` **(** **)**                                                                                                                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`interpolate_with<class_Transform2D_method_interpolate_with>` **(** :ref:`Transform2D<class_Transform2D>` transform, :ref:`float<class_float>` weight **)**                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`inverse<class_Transform2D_method_inverse>` **(** **)**                                                                                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`is_equal_approx<class_Transform2D_method_is_equal_approx>` **(** :ref:`Transform2D<class_Transform2D>` transform **)**                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`orthonormalized<class_Transform2D_method_orthonormalized>` **(** **)**                                                                                                          |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`rotated<class_Transform2D_method_rotated>` **(** :ref:`float<class_float>` phi **)**                                                                                            |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`scaled<class_Transform2D_method_scaled>` **(** :ref:`Vector2<class_Vector2>` scale **)**                                                                                        |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Transform2D<class_Transform2D>` | :ref:`translated<class_Transform2D_method_translated>` **(** :ref:`Vector2<class_Vector2>` offset **)**                                                                               |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`         | :ref:`xform<class_Transform2D_method_xform>` **(** :ref:`Variant<class_Variant>` v **)**                                                                                              |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_Variant>`         | :ref:`xform_inv<class_Transform2D_method_xform_inv>` **(** :ref:`Variant<class_Variant>` v **)**                                                                                      |
+---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Constants
---------

.. _class_Transform2D_constant_IDENTITY:

.. _class_Transform2D_constant_FLIP_X:

.. _class_Transform2D_constant_FLIP_Y:

- **IDENTITY** = **Transform2D( 1, 0, 0, 1, 0, 0 )** --- The identity ``Transform2D`` with no translation, rotation or scaling applied. When applied to other data structures, :ref:`IDENTITY<class_Transform2D_constant_IDENTITY>` performs no transformation.

- **FLIP_X** = **Transform2D( -1, 0, 0, 1, 0, 0 )** --- The ``Transform2D`` that will flip something along the X axis.

- **FLIP_Y** = **Transform2D( 1, 0, 0, -1, 0, 0 )** --- The ``Transform2D`` that will flip something along the Y axis.

Property Descriptions
---------------------

.. _class_Transform2D_property_origin:

- :ref:`Vector2<class_Vector2>` **origin**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 0 )`` |
+-----------+---------------------+

The origin vector (column 2, the third column). Equivalent to array index ``2``. The origin vector represents translation.

----

.. _class_Transform2D_property_x:

- :ref:`Vector2<class_Vector2>` **x**

+-----------+---------------------+
| *Default* | ``Vector2( 1, 0 )`` |
+-----------+---------------------+

The basis matrix's X vector (column 0). Equivalent to array index ``0``.

----

.. _class_Transform2D_property_y:

- :ref:`Vector2<class_Vector2>` **y**

+-----------+---------------------+
| *Default* | ``Vector2( 0, 1 )`` |
+-----------+---------------------+

The basis matrix's Y vector (column 1). Equivalent to array index ``1``.

Method Descriptions
-------------------

.. _class_Transform2D_method_Transform2D:

- :ref:`Transform2D<class_Transform2D>` **Transform2D** **(** :ref:`Transform<class_Transform>` from **)**

Constructs the transform from a 3D :ref:`Transform<class_Transform>`.

----

- :ref:`Transform2D<class_Transform2D>` **Transform2D** **(** :ref:`Vector2<class_Vector2>` x_axis, :ref:`Vector2<class_Vector2>` y_axis, :ref:`Vector2<class_Vector2>` origin **)**

Constructs the transform from 3 :ref:`Vector2<class_Vector2>` values representing :ref:`x<class_Transform2D_property_x>`, :ref:`y<class_Transform2D_property_y>`, and the :ref:`origin<class_Transform2D_property_origin>` (the three column vectors).

----

- :ref:`Transform2D<class_Transform2D>` **Transform2D** **(** :ref:`float<class_float>` rotation, :ref:`Vector2<class_Vector2>` position **)**

Constructs the transform from a given angle (in radians) and position.

----

.. _class_Transform2D_method_affine_inverse:

- :ref:`Transform2D<class_Transform2D>` **affine_inverse** **(** **)**

Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation.

----

.. _class_Transform2D_method_basis_xform:

- :ref:`Vector2<class_Vector2>` **basis_xform** **(** :ref:`Vector2<class_Vector2>` v **)**

Returns a vector transformed (multiplied) by the basis matrix.

This method does not account for translation (the origin vector).

----

.. _class_Transform2D_method_basis_xform_inv:

- :ref:`Vector2<class_Vector2>` **basis_xform_inv** **(** :ref:`Vector2<class_Vector2>` v **)**

Returns a vector transformed (multiplied) by the inverse basis matrix.

This method does not account for translation (the origin vector).

----

.. _class_Transform2D_method_get_origin:

- :ref:`Vector2<class_Vector2>` **get_origin** **(** **)**

Returns the transform's origin (translation).

----

.. _class_Transform2D_method_get_rotation:

- :ref:`float<class_float>` **get_rotation** **(** **)**

Returns the transform's rotation (in radians).

----

.. _class_Transform2D_method_get_scale:

- :ref:`Vector2<class_Vector2>` **get_scale** **(** **)**

Returns the scale.

----

.. _class_Transform2D_method_interpolate_with:

- :ref:`Transform2D<class_Transform2D>` **interpolate_with** **(** :ref:`Transform2D<class_Transform2D>` transform, :ref:`float<class_float>` weight **)**

Returns a transform interpolated between this transform and another by a given ``weight`` (on the range of 0.0 to 1.0).

----

.. _class_Transform2D_method_inverse:

- :ref:`Transform2D<class_Transform2D>` **inverse** **(** **)**

Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use :ref:`affine_inverse<class_Transform2D_method_affine_inverse>` for transforms with scaling).

----

.. _class_Transform2D_method_is_equal_approx:

- :ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Transform2D<class_Transform2D>` transform **)**

Returns ``true`` if this transform and ``transform`` are approximately equal, by calling ``is_equal_approx`` on each component.

----

.. _class_Transform2D_method_orthonormalized:

- :ref:`Transform2D<class_Transform2D>` **orthonormalized** **(** **)**

Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors (scale of 1 or -1).

----

.. _class_Transform2D_method_rotated:

- :ref:`Transform2D<class_Transform2D>` **rotated** **(** :ref:`float<class_float>` phi **)**

Rotates the transform by the given angle (in radians), using matrix multiplication.

----

.. _class_Transform2D_method_scaled:

- :ref:`Transform2D<class_Transform2D>` **scaled** **(** :ref:`Vector2<class_Vector2>` scale **)**

Scales the transform by the given scale factor, using matrix multiplication.

----

.. _class_Transform2D_method_translated:

- :ref:`Transform2D<class_Transform2D>` **translated** **(** :ref:`Vector2<class_Vector2>` offset **)**

Translates the transform by the given offset, relative to the transform's basis vectors.

Unlike :ref:`rotated<class_Transform2D_method_rotated>` and :ref:`scaled<class_Transform2D_method_scaled>`, this does not use matrix multiplication.

----

.. _class_Transform2D_method_xform:

- :ref:`Variant<class_Variant>` **xform** **(** :ref:`Variant<class_Variant>` v **)**

Transforms the given :ref:`Vector2<class_Vector2>`, :ref:`Rect2<class_Rect2>`, or :ref:`PoolVector2Array<class_PoolVector2Array>` by this transform.

----

.. _class_Transform2D_method_xform_inv:

- :ref:`Variant<class_Variant>` **xform_inv** **(** :ref:`Variant<class_Variant>` v **)**

Inverse-transforms the given :ref:`Vector2<class_Vector2>`, :ref:`Rect2<class_Rect2>`, or :ref:`PoolVector2Array<class_PoolVector2Array>` by this transform, under the assumption that the transformation is composed of rotation and translation (no scaling). Equivalent to calling ``inverse().xform(v)`` on this transform. For affine transformations (e.g. with scaling) see :ref:`affine_inverse<class_Transform2D_method_affine_inverse>` method.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
