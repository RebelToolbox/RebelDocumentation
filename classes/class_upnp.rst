:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the UPNP.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_UPNP:

UPNP
====

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

UPNP network functions.

Description
-----------

Provides UPNP functionality to discover :ref:`UPNPDevice<class_UPNPDevice>`\ s on the local network and execute commands on them, like managing port mappings (port forwarding) and querying the local and remote network IP address. Note that methods on this class are synchronous and block the calling thread.

To forward a specific port:

::

    const PORT = 7777
    var upnp = UPNP.new()
    upnp.discover(2000, 2, "InternetGatewayDevice")
    upnp.add_port_mapping(port)

To close a specific port (e.g. after you have finished using it):

::

    upnp.delete_port_mapping(port)

**Note:** UPnP discovery blocks the current thread. To perform discovery without blocking the main thread, use :ref:`Thread<class_Thread>`\ s like this:

::

    # Emitted when UPnP port mapping setup is completed (regardless of success or failure).
    signal upnp_completed(error)
    
    # Replace this with your own server port number between 1025 and 65535.
    const SERVER_PORT = 3928
    var thread = null
    
    func _upnp_setup(server_port):
        # UPNP queries take some time.
        var upnp = UPNP.new()
        var err = upnp.discover()
    
        if err != OK:
            push_error(str(err))
            emit_signal("upnp_completed", err)
            return
    
        if upnp.get_gateway() and upnp.get_gateway().is_valid_gateway():
            upnp.add_port_mapping(server_port, server_port, ProjectSettings.get_setting("application/config/name"), "UDP")
            upnp.add_port_mapping(server_port, server_port, ProjectSettings.get_setting("application/config/name"), "TCP")
            emit_signal("upnp_completed", OK)
    
    func _ready():
        thread = Thread.new()
        thread.start(self, "_upnp_setup", SERVER_PORT)
    
    func _exit_tree():
        # Wait for thread finish here to handle game exit while the thread is running.
        thread.wait_to_finish()

Properties
----------

+-----------------------------+-------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`     | :ref:`discover_ipv6<class_UPNP_property_discover_ipv6>`                 | ``false`` |
+-----------------------------+-------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`       | :ref:`discover_local_port<class_UPNP_property_discover_local_port>`     | ``0``     |
+-----------------------------+-------------------------------------------------------------------------+-----------+
| :ref:`String<class_String>` | :ref:`discover_multicast_if<class_UPNP_property_discover_multicast_if>` | ``""``    |
+-----------------------------+-------------------------------------------------------------------------+-----------+

Methods
-------

+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`add_device<class_UPNP_method_add_device>` **(** :ref:`UPNPDevice<class_UPNPDevice>` device **)**                                                                                                                                                            |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`add_port_mapping<class_UPNP_method_add_port_mapping>` **(** :ref:`int<class_int>` port, :ref:`int<class_int>` port_internal=0, :ref:`String<class_String>` desc="", :ref:`String<class_String>` proto="UDP", :ref:`int<class_int>` duration=0 **)** |const| |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`clear_devices<class_UPNP_method_clear_devices>` **(** **)**                                                                                                                                                                                                 |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`delete_port_mapping<class_UPNP_method_delete_port_mapping>` **(** :ref:`int<class_int>` port, :ref:`String<class_String>` proto="UDP" **)** |const|                                                                                                         |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`discover<class_UPNP_method_discover>` **(** :ref:`int<class_int>` timeout=2000, :ref:`int<class_int>` ttl=2, :ref:`String<class_String>` device_filter="InternetGatewayDevice" **)**                                                                        |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`UPNPDevice<class_UPNPDevice>` | :ref:`get_device<class_UPNP_method_get_device>` **(** :ref:`int<class_int>` index **)** |const|                                                                                                                                                                   |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`get_device_count<class_UPNP_method_get_device_count>` **(** **)** |const|                                                                                                                                                                                   |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`UPNPDevice<class_UPNPDevice>` | :ref:`get_gateway<class_UPNP_method_get_gateway>` **(** **)** |const|                                                                                                                                                                                             |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_String>`         | :ref:`query_external_address<class_UPNP_method_query_external_address>` **(** **)** |const|                                                                                                                                                                       |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`remove_device<class_UPNP_method_remove_device>` **(** :ref:`int<class_int>` index **)**                                                                                                                                                                     |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`set_device<class_UPNP_method_set_device>` **(** :ref:`int<class_int>` index, :ref:`UPNPDevice<class_UPNPDevice>` device **)**                                                                                                                               |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_UPNP_UPNPResult:

.. _class_UPNP_constant_UPNP_RESULT_SUCCESS:

.. _class_UPNP_constant_UPNP_RESULT_NOT_AUTHORIZED:

.. _class_UPNP_constant_UPNP_RESULT_PORT_MAPPING_NOT_FOUND:

.. _class_UPNP_constant_UPNP_RESULT_INCONSISTENT_PARAMETERS:

.. _class_UPNP_constant_UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY:

.. _class_UPNP_constant_UPNP_RESULT_ACTION_FAILED:

.. _class_UPNP_constant_UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED:

.. _class_UPNP_constant_UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED:

.. _class_UPNP_constant_UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED:

.. _class_UPNP_constant_UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD:

.. _class_UPNP_constant_UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD:

.. _class_UPNP_constant_UPNP_RESULT_NO_PORT_MAPS_AVAILABLE:

.. _class_UPNP_constant_UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM:

.. _class_UPNP_constant_UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING:

.. _class_UPNP_constant_UPNP_RESULT_SAME_PORT_VALUES_REQUIRED:

.. _class_UPNP_constant_UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED:

.. _class_UPNP_constant_UPNP_RESULT_INVALID_GATEWAY:

.. _class_UPNP_constant_UPNP_RESULT_INVALID_PORT:

.. _class_UPNP_constant_UPNP_RESULT_INVALID_PROTOCOL:

.. _class_UPNP_constant_UPNP_RESULT_INVALID_DURATION:

.. _class_UPNP_constant_UPNP_RESULT_INVALID_ARGS:

.. _class_UPNP_constant_UPNP_RESULT_INVALID_RESPONSE:

.. _class_UPNP_constant_UPNP_RESULT_INVALID_PARAM:

.. _class_UPNP_constant_UPNP_RESULT_HTTP_ERROR:

.. _class_UPNP_constant_UPNP_RESULT_SOCKET_ERROR:

.. _class_UPNP_constant_UPNP_RESULT_MEM_ALLOC_ERROR:

.. _class_UPNP_constant_UPNP_RESULT_NO_GATEWAY:

.. _class_UPNP_constant_UPNP_RESULT_NO_DEVICES:

.. _class_UPNP_constant_UPNP_RESULT_UNKNOWN_ERROR:

enum **UPNPResult**:

- **UPNP_RESULT_SUCCESS** = **0** --- UPNP command or discovery was successful.

- **UPNP_RESULT_NOT_AUTHORIZED** = **1** --- Not authorized to use the command on the :ref:`UPNPDevice<class_UPNPDevice>`. May be returned when the user disabled UPNP on their router.

- **UPNP_RESULT_PORT_MAPPING_NOT_FOUND** = **2** --- No port mapping was found for the given port, protocol combination on the given :ref:`UPNPDevice<class_UPNPDevice>`.

- **UPNP_RESULT_INCONSISTENT_PARAMETERS** = **3** --- Inconsistent parameters.

- **UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY** = **4** --- No such entry in array. May be returned if a given port, protocol combination is not found on an :ref:`UPNPDevice<class_UPNPDevice>`.

- **UPNP_RESULT_ACTION_FAILED** = **5** --- The action failed.

- **UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED** = **6** --- The :ref:`UPNPDevice<class_UPNPDevice>` does not allow wildcard values for the source IP address.

- **UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED** = **7** --- The :ref:`UPNPDevice<class_UPNPDevice>` does not allow wildcard values for the external port.

- **UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED** = **8** --- The :ref:`UPNPDevice<class_UPNPDevice>` does not allow wildcard values for the internal port.

- **UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD** = **9** --- The remote host value must be a wildcard.

- **UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD** = **10** --- The external port value must be a wildcard.

- **UPNP_RESULT_NO_PORT_MAPS_AVAILABLE** = **11** --- No port maps are available. May also be returned if port mapping functionality is not available.

- **UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM** = **12** --- Conflict with other mechanism. May be returned instead of :ref:`UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING<class_UPNP_constant_UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING>` if a port mapping conflicts with an existing one.

- **UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING** = **13** --- Conflict with an existing port mapping.

- **UPNP_RESULT_SAME_PORT_VALUES_REQUIRED** = **14** --- External and internal port values must be the same.

- **UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED** = **15** --- Only permanent leases are supported. Do not use the ``duration`` parameter when adding port mappings.

- **UPNP_RESULT_INVALID_GATEWAY** = **16** --- Invalid gateway.

- **UPNP_RESULT_INVALID_PORT** = **17** --- Invalid port.

- **UPNP_RESULT_INVALID_PROTOCOL** = **18** --- Invalid protocol.

- **UPNP_RESULT_INVALID_DURATION** = **19** --- Invalid duration.

- **UPNP_RESULT_INVALID_ARGS** = **20** --- Invalid arguments.

- **UPNP_RESULT_INVALID_RESPONSE** = **21** --- Invalid response.

- **UPNP_RESULT_INVALID_PARAM** = **22** --- Invalid parameter.

- **UPNP_RESULT_HTTP_ERROR** = **23** --- HTTP error.

- **UPNP_RESULT_SOCKET_ERROR** = **24** --- Socket error.

- **UPNP_RESULT_MEM_ALLOC_ERROR** = **25** --- Error allocating memory.

- **UPNP_RESULT_NO_GATEWAY** = **26** --- No gateway available. You may need to call :ref:`discover<class_UPNP_method_discover>` first, or discovery didn't detect any valid IGDs (InternetGatewayDevices).

- **UPNP_RESULT_NO_DEVICES** = **27** --- No devices available. You may need to call :ref:`discover<class_UPNP_method_discover>` first, or discovery didn't detect any valid :ref:`UPNPDevice<class_UPNPDevice>`\ s.

- **UPNP_RESULT_UNKNOWN_ERROR** = **28** --- Unknown error.

Property Descriptions
---------------------

.. _class_UPNP_property_discover_ipv6:

- :ref:`bool<class_bool>` **discover_ipv6**

+-----------+--------------------------+
| *Default* | ``false``                |
+-----------+--------------------------+
| *Setter*  | set_discover_ipv6(value) |
+-----------+--------------------------+
| *Getter*  | is_discover_ipv6()       |
+-----------+--------------------------+

If ``true``, IPv6 is used for :ref:`UPNPDevice<class_UPNPDevice>` discovery.

----

.. _class_UPNP_property_discover_local_port:

- :ref:`int<class_int>` **discover_local_port**

+-----------+--------------------------------+
| *Default* | ``0``                          |
+-----------+--------------------------------+
| *Setter*  | set_discover_local_port(value) |
+-----------+--------------------------------+
| *Getter*  | get_discover_local_port()      |
+-----------+--------------------------------+

If ``0``, the local port to use for discovery is chosen automatically by the system. If ``1``, discovery will be done from the source port 1900 (same as destination port). Otherwise, the value will be used as the port.

----

.. _class_UPNP_property_discover_multicast_if:

- :ref:`String<class_String>` **discover_multicast_if**

+-----------+----------------------------------+
| *Default* | ``""``                           |
+-----------+----------------------------------+
| *Setter*  | set_discover_multicast_if(value) |
+-----------+----------------------------------+
| *Getter*  | get_discover_multicast_if()      |
+-----------+----------------------------------+

Multicast interface to use for discovery. Uses the default multicast interface if empty.

Method Descriptions
-------------------

.. _class_UPNP_method_add_device:

- void **add_device** **(** :ref:`UPNPDevice<class_UPNPDevice>` device **)**

Adds the given :ref:`UPNPDevice<class_UPNPDevice>` to the list of discovered devices.

----

.. _class_UPNP_method_add_port_mapping:

- :ref:`int<class_int>` **add_port_mapping** **(** :ref:`int<class_int>` port, :ref:`int<class_int>` port_internal=0, :ref:`String<class_String>` desc="", :ref:`String<class_String>` proto="UDP", :ref:`int<class_int>` duration=0 **)** |const|

Adds a mapping to forward the external ``port`` (between 1 and 65535) on the default gateway (see :ref:`get_gateway<class_UPNP_method_get_gateway>`) to the ``internal_port`` on the local machine for the given protocol ``proto`` (either ``TCP`` or ``UDP``, with UDP being the default). If a port mapping for the given port and protocol combination already exists on that gateway device, this method tries to overwrite it. If that is not desired, you can retrieve the gateway manually with :ref:`get_gateway<class_UPNP_method_get_gateway>` and call :ref:`add_port_mapping<class_UPNP_method_add_port_mapping>` on it, if any.

If ``internal_port`` is ``0`` (the default), the same port number is used for both the external and the internal port (the ``port`` value).

The description (``desc``) is shown in some router UIs and can be used to point out which application added the mapping. The mapping's lease duration can be limited by specifying a ``duration`` (in seconds). However, some routers are incompatible with one or both of these, so use with caution and add fallback logic in case of errors to retry without them if in doubt.

See :ref:`UPNPResult<enum_UPNP_UPNPResult>` for possible return values.

----

.. _class_UPNP_method_clear_devices:

- void **clear_devices** **(** **)**

Clears the list of discovered devices.

----

.. _class_UPNP_method_delete_port_mapping:

- :ref:`int<class_int>` **delete_port_mapping** **(** :ref:`int<class_int>` port, :ref:`String<class_String>` proto="UDP" **)** |const|

Deletes the port mapping for the given port and protocol combination on the default gateway (see :ref:`get_gateway<class_UPNP_method_get_gateway>`) if one exists. ``port`` must be a valid port between 1 and 65535, ``proto`` can be either ``TCP`` or ``UDP``. See :ref:`UPNPResult<enum_UPNP_UPNPResult>` for possible return values.

----

.. _class_UPNP_method_discover:

- :ref:`int<class_int>` **discover** **(** :ref:`int<class_int>` timeout=2000, :ref:`int<class_int>` ttl=2, :ref:`String<class_String>` device_filter="InternetGatewayDevice" **)**

Discovers local :ref:`UPNPDevice<class_UPNPDevice>`\ s. Clears the list of previously discovered devices.

Filters for IGD (InternetGatewayDevice) type devices by default, as those manage port forwarding. ``timeout`` is the time to wait for responses in milliseconds. ``ttl`` is the time-to-live; only touch this if you know what you're doing.

See :ref:`UPNPResult<enum_UPNP_UPNPResult>` for possible return values.

----

.. _class_UPNP_method_get_device:

- :ref:`UPNPDevice<class_UPNPDevice>` **get_device** **(** :ref:`int<class_int>` index **)** |const|

Returns the :ref:`UPNPDevice<class_UPNPDevice>` at the given ``index``.

----

.. _class_UPNP_method_get_device_count:

- :ref:`int<class_int>` **get_device_count** **(** **)** |const|

Returns the number of discovered :ref:`UPNPDevice<class_UPNPDevice>`\ s.

----

.. _class_UPNP_method_get_gateway:

- :ref:`UPNPDevice<class_UPNPDevice>` **get_gateway** **(** **)** |const|

Returns the default gateway. That is the first discovered :ref:`UPNPDevice<class_UPNPDevice>` that is also a valid IGD (InternetGatewayDevice).

----

.. _class_UPNP_method_query_external_address:

- :ref:`String<class_String>` **query_external_address** **(** **)** |const|

Returns the external :ref:`IP<class_IP>` address of the default gateway (see :ref:`get_gateway<class_UPNP_method_get_gateway>`) as string. Returns an empty string on error.

----

.. _class_UPNP_method_remove_device:

- void **remove_device** **(** :ref:`int<class_int>` index **)**

Removes the device at ``index`` from the list of discovered devices.

----

.. _class_UPNP_method_set_device:

- void **set_device** **(** :ref:`int<class_int>` index, :ref:`UPNPDevice<class_UPNPDevice>` device **)**

Sets the device at ``index`` from the list of discovered devices to ``device``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
