:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the bool.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_bool:

bool
====

Boolean built-in type.

Description
-----------

Boolean is a built-in type. There are two boolean values: ``true`` and ``false``. You can think of it as a switch with on or off (1 or 0) setting. Booleans are used in programming for logic in condition statements, like ``if`` statements.

Booleans can be directly used in ``if`` statements. The code below demonstrates this on the ``if can_shoot:`` line. You don't need to use ``== true``, you only need ``if can_shoot:``. Similarly, use ``if not can_shoot:`` rather than ``== false``.

::

    var can_shoot = true
    
    func shoot():
        if can_shoot:
            pass # Perform shooting actions here.

The following code will only create a bullet if both conditions are met: action "shoot" is pressed and if ``can_shoot`` is ``true``.

**Note:** ``Input.is_action_pressed("shoot")`` is also a boolean that is ``true`` when "shoot" is pressed and ``false`` when "shoot" isn't pressed.

::

    var can_shoot = true
    
    func shoot():
        if can_shoot and Input.is_action_pressed("shoot"):
            create_bullet()

The following code will set ``can_shoot`` to ``false`` and start a timer. This will prevent player from shooting until the timer runs out. Next ``can_shoot`` will be set to ``true`` again allowing player to shoot once again.

::

    var can_shoot = true
    onready var cool_down = $CoolDownTimer
    
    func shoot():
        if can_shoot and Input.is_action_pressed("shoot"):
            create_bullet()
            can_shoot = false
            cool_down.start()
    
    func _on_CoolDownTimer_timeout():
        can_shoot = true

Methods
-------

+-------------------------+----------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`bool<class_bool_method_bool>` **(** :ref:`int<class_int>` from **)**       |
+-------------------------+----------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`bool<class_bool_method_bool>` **(** :ref:`float<class_float>` from **)**   |
+-------------------------+----------------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`bool<class_bool_method_bool>` **(** :ref:`String<class_String>` from **)** |
+-------------------------+----------------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_bool_method_bool:

- :ref:`bool<class_bool>` **bool** **(** :ref:`int<class_int>` from **)**

Cast an :ref:`int<class_int>` value to a boolean value, this method will return ``false`` if ``0`` is passed in, and ``true`` for all other ints.

----

- :ref:`bool<class_bool>` **bool** **(** :ref:`float<class_float>` from **)**

Cast a :ref:`float<class_float>` value to a boolean value, this method will return ``false`` if ``0.0`` is passed in, and ``true`` for all other floats.

----

- :ref:`bool<class_bool>` **bool** **(** :ref:`String<class_String>` from **)**

Cast a :ref:`String<class_String>` value to a boolean value, this method will return ``false`` if ``""`` is passed in, and ``true`` for all non-empty strings.

Examples: ``bool("False")`` returns ``true``, ``bool("")`` returns ``false``.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
