:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the StaticBody.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_StaticBody:

StaticBody
==========

**Inherits:** :ref:`PhysicsBody<class_PhysicsBody>` **<** :ref:`CollisionObject<class_CollisionObject>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Static body for 3D physics.

Description
-----------

Static body for 3D physics. A static body is a simple body that is not intended to move. In contrast to :ref:`RigidBody<class_RigidBody>`, they don't consume any CPU resources as long as they don't move.

Additionally, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).

Tutorials
---------

- `3D Physics Tests Demo <https://godotengine.org/asset-library/asset/675>`__

- `Third Person Shooter Demo <https://godotengine.org/asset-library/asset/678>`__

- `3D Voxel Demo <https://godotengine.org/asset-library/asset/676>`__

Properties
----------

+-----------------------------------------------+---------------------------------------------------------------------------------------+------------------------+
| :ref:`float<class_float>`                     | :ref:`bounce<class_StaticBody_property_bounce>`                                       |                        |
+-----------------------------------------------+---------------------------------------------------------------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>`                 | :ref:`constant_angular_velocity<class_StaticBody_property_constant_angular_velocity>` | ``Vector3( 0, 0, 0 )`` |
+-----------------------------------------------+---------------------------------------------------------------------------------------+------------------------+
| :ref:`Vector3<class_Vector3>`                 | :ref:`constant_linear_velocity<class_StaticBody_property_constant_linear_velocity>`   | ``Vector3( 0, 0, 0 )`` |
+-----------------------------------------------+---------------------------------------------------------------------------------------+------------------------+
| :ref:`float<class_float>`                     | :ref:`friction<class_StaticBody_property_friction>`                                   |                        |
+-----------------------------------------------+---------------------------------------------------------------------------------------+------------------------+
| :ref:`PhysicsMaterial<class_PhysicsMaterial>` | :ref:`physics_material_override<class_StaticBody_property_physics_material_override>` |                        |
+-----------------------------------------------+---------------------------------------------------------------------------------------+------------------------+

Property Descriptions
---------------------

.. _class_StaticBody_property_bounce:

- :ref:`float<class_float>` **bounce**

+----------+-------------------+
| *Setter* | set_bounce(value) |
+----------+-------------------+
| *Getter* | get_bounce()      |
+----------+-------------------+

The body's bounciness. Values range from ``0`` (no bounce) to ``1`` (full bounciness).

Deprecated, use :ref:`PhysicsMaterial.bounce<class_PhysicsMaterial_property_bounce>` instead via :ref:`physics_material_override<class_StaticBody_property_physics_material_override>`.

----

.. _class_StaticBody_property_constant_angular_velocity:

- :ref:`Vector3<class_Vector3>` **constant_angular_velocity**

+-----------+--------------------------------------+
| *Default* | ``Vector3( 0, 0, 0 )``               |
+-----------+--------------------------------------+
| *Setter*  | set_constant_angular_velocity(value) |
+-----------+--------------------------------------+
| *Getter*  | get_constant_angular_velocity()      |
+-----------+--------------------------------------+

The body's constant angular velocity. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation.

----

.. _class_StaticBody_property_constant_linear_velocity:

- :ref:`Vector3<class_Vector3>` **constant_linear_velocity**

+-----------+-------------------------------------+
| *Default* | ``Vector3( 0, 0, 0 )``              |
+-----------+-------------------------------------+
| *Setter*  | set_constant_linear_velocity(value) |
+-----------+-------------------------------------+
| *Getter*  | get_constant_linear_velocity()      |
+-----------+-------------------------------------+

The body's constant linear velocity. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement.

----

.. _class_StaticBody_property_friction:

- :ref:`float<class_float>` **friction**

+----------+---------------------+
| *Setter* | set_friction(value) |
+----------+---------------------+
| *Getter* | get_friction()      |
+----------+---------------------+

The body's friction, from 0 (frictionless) to 1 (full friction).

Deprecated, use :ref:`PhysicsMaterial.friction<class_PhysicsMaterial_property_friction>` instead via :ref:`physics_material_override<class_StaticBody_property_physics_material_override>`.

----

.. _class_StaticBody_property_physics_material_override:

- :ref:`PhysicsMaterial<class_PhysicsMaterial>` **physics_material_override**

+----------+--------------------------------------+
| *Setter* | set_physics_material_override(value) |
+----------+--------------------------------------+
| *Getter* | get_physics_material_override()      |
+----------+--------------------------------------+

The physics material override for the body.

If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
