:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PackedScene.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PackedScene:

PackedScene
===========

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`PackedSceneGLTF<class_PackedSceneGLTF>`

An abstraction of a serialized scene.

Description
-----------

A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself.

Can be used to save a node to a file. When saving, the node as well as all the nodes it owns get saved (see ``owner`` property on :ref:`Node<class_Node>`).

**Note:** The node doesn't need to own itself.

**Example of loading a saved scene:**

::

    # Use `load()` instead of `preload()` if the path isn't known at compile-time.
    var scene = preload("res://scene.tscn").instance()
    # Add the node as a child of the node the script is attached to.
    add_child(scene)

**Example of saving a node with different owners:** The following example creates 3 objects: ``Node2D`` (``node``), ``RigidBody2D`` (``rigid``) and ``CollisionObject2D`` (``collision``). ``collision`` is a child of ``rigid`` which is a child of ``node``. Only ``rigid`` is owned by ``node`` and ``pack`` will therefore only save those two nodes, but not ``collision``.

::

    # Create the objects.
    var node = Node2D.new()
    var rigid = RigidBody2D.new()
    var collision = CollisionShape2D.new()
    
    # Create the object hierarchy.
    rigid.add_child(collision)
    node.add_child(rigid)
    
    # Change owner of `rigid`, but not of `collision`.
    rigid.owner = node
    
    var scene = PackedScene.new()
    # Only `node` and `rigid` are now packed.
    var result = scene.pack(node)
    if result == OK:
        var error = ResourceSaver.save("res://path/name.scn", scene)  # Or "user://..."
        if error != OK:
            push_error("An error occurred while saving the scene to disk.")

Tutorials
---------

- `2D Role Playing Game Demo <https://godotengine.org/asset-library/asset/520>`__

Properties
----------

+-------------------------------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_Dictionary>` | :ref:`_bundled<class_PackedScene_property__bundled>` | ``{"conn_count": 0,"conns": PoolIntArray(  ),"editable_instances": [  ],"names": PoolStringArray(  ),"node_count": 0,"node_paths": [  ],"nodes": PoolIntArray(  ),"variants": [  ],"version": 2}`` |
+-------------------------------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Methods
-------

+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`               | :ref:`can_instance<class_PackedScene_method_can_instance>` **(** **)** |const|                                                         |
+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`SceneState<class_SceneState>`   | :ref:`get_state<class_PackedScene_method_get_state>` **(** **)**                                                                       |
+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Node<class_Node>`               | :ref:`instance<class_PackedScene_method_instance>` **(** :ref:`GenEditState<enum_PackedScene_GenEditState>` edit_state=0 **)** |const| |
+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>` | :ref:`pack<class_PackedScene_method_pack>` **(** :ref:`Node<class_Node>` path **)**                                                    |
+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_PackedScene_GenEditState:

.. _class_PackedScene_constant_GEN_EDIT_STATE_DISABLED:

.. _class_PackedScene_constant_GEN_EDIT_STATE_INSTANCE:

.. _class_PackedScene_constant_GEN_EDIT_STATE_MAIN:

enum **GenEditState**:

- **GEN_EDIT_STATE_DISABLED** = **0** --- If passed to :ref:`instance<class_PackedScene_method_instance>`, blocks edits to the scene state.

- **GEN_EDIT_STATE_INSTANCE** = **1** --- If passed to :ref:`instance<class_PackedScene_method_instance>`, provides local scene resources to the local scene.

**Note:** Only available in editor builds.

- **GEN_EDIT_STATE_MAIN** = **2** --- If passed to :ref:`instance<class_PackedScene_method_instance>`, provides local scene resources to the local scene. Only the main scene should receive the main edit state.

**Note:** Only available in editor builds.

Property Descriptions
---------------------

.. _class_PackedScene_property__bundled:

- :ref:`Dictionary<class_Dictionary>` **_bundled**

+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| *Default* | ``{"conn_count": 0,"conns": PoolIntArray(  ),"editable_instances": [  ],"names": PoolStringArray(  ),"node_count": 0,"node_paths": [  ],"nodes": PoolIntArray(  ),"variants": [  ],"version": 2}`` |
+-----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

A dictionary representation of the scene contents.

Available keys include "rnames" and "variants" for resources, "node_count", "nodes", "node_paths" for nodes, "editable_instances" for base scene children overrides, "conn_count" and "conns" for signal connections, and "version" for the format style of the PackedScene.

Method Descriptions
-------------------

.. _class_PackedScene_method_can_instance:

- :ref:`bool<class_bool>` **can_instance** **(** **)** |const|

Returns ``true`` if the scene file has nodes.

----

.. _class_PackedScene_method_get_state:

- :ref:`SceneState<class_SceneState>` **get_state** **(** **)**

Returns the ``SceneState`` representing the scene file contents.

----

.. _class_PackedScene_method_instance:

- :ref:`Node<class_Node>` **instance** **(** :ref:`GenEditState<enum_PackedScene_GenEditState>` edit_state=0 **)** |const|

Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers a :ref:`Node.NOTIFICATION_INSTANCED<class_Node_constant_NOTIFICATION_INSTANCED>` notification on the root node.

----

.. _class_PackedScene_method_pack:

- :ref:`Error<enum_@GlobalScope_Error>` **pack** **(** :ref:`Node<class_Node>` path **)**

Pack will ignore any sub-nodes not owned by given node. See :ref:`Node.owner<class_Node_property_owner>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
