:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the BackBufferCopy.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_BackBufferCopy:

BackBufferCopy
==============

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Copies a region of the screen (or the whole screen) to a buffer so it can be accessed in your shader scripts through the ``texture(SCREEN_TEXTURE, ...)`` function.

Description
-----------

Node for back-buffering the currently-displayed screen. The region defined in the BackBufferCopy node is buffered with the content of the screen it covers, or the entire screen according to the copy mode set. Use the ``texture(SCREEN_TEXTURE, ...)`` function in your shader scripts to access the buffer.

**Note:** Since this node inherits from :ref:`Node2D<class_Node2D>` (and not :ref:`Control<class_Control>`), anchors and margins won't apply to child :ref:`Control<class_Control>`-derived nodes. This can be problematic when resizing the window. To avoid this, add :ref:`Control<class_Control>`-derived nodes as *siblings* to the BackBufferCopy node instead of adding them as children.

Properties
----------

+-----------------------------------------------+-----------------------------------------------------------+-----------------------------------+
| :ref:`CopyMode<enum_BackBufferCopy_CopyMode>` | :ref:`copy_mode<class_BackBufferCopy_property_copy_mode>` | ``1``                             |
+-----------------------------------------------+-----------------------------------------------------------+-----------------------------------+
| :ref:`Rect2<class_Rect2>`                     | :ref:`rect<class_BackBufferCopy_property_rect>`           | ``Rect2( -100, -100, 200, 200 )`` |
+-----------------------------------------------+-----------------------------------------------------------+-----------------------------------+

Enumerations
------------

.. _enum_BackBufferCopy_CopyMode:

.. _class_BackBufferCopy_constant_COPY_MODE_DISABLED:

.. _class_BackBufferCopy_constant_COPY_MODE_RECT:

.. _class_BackBufferCopy_constant_COPY_MODE_VIEWPORT:

enum **CopyMode**:

- **COPY_MODE_DISABLED** = **0** --- Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers.

- **COPY_MODE_RECT** = **1** --- BackBufferCopy buffers a rectangular region.

- **COPY_MODE_VIEWPORT** = **2** --- BackBufferCopy buffers the entire screen.

Property Descriptions
---------------------

.. _class_BackBufferCopy_property_copy_mode:

- :ref:`CopyMode<enum_BackBufferCopy_CopyMode>` **copy_mode**

+-----------+----------------------+
| *Default* | ``1``                |
+-----------+----------------------+
| *Setter*  | set_copy_mode(value) |
+-----------+----------------------+
| *Getter*  | get_copy_mode()      |
+-----------+----------------------+

Buffer mode. See :ref:`CopyMode<enum_BackBufferCopy_CopyMode>` constants.

----

.. _class_BackBufferCopy_property_rect:

- :ref:`Rect2<class_Rect2>` **rect**

+-----------+-----------------------------------+
| *Default* | ``Rect2( -100, -100, 200, 200 )`` |
+-----------+-----------------------------------+
| *Setter*  | set_rect(value)                   |
+-----------+-----------------------------------+
| *Getter*  | get_rect()                        |
+-----------+-----------------------------------+

The area covered by the BackBufferCopy. Only used if :ref:`copy_mode<class_BackBufferCopy_property_copy_mode>` is :ref:`COPY_MODE_RECT<class_BackBufferCopy_constant_COPY_MODE_RECT>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
