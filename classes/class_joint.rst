:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Joint.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Joint:

Joint
=====

**Inherits:** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`ConeTwistJoint<class_ConeTwistJoint>`, :ref:`Generic6DOFJoint<class_Generic6DOFJoint>`, :ref:`HingeJoint<class_HingeJoint>`, :ref:`PinJoint<class_PinJoint>`, :ref:`SliderJoint<class_SliderJoint>`

Base class for all 3D joints.

Description
-----------

Joints are used to bind together two physics bodies. They have a solver priority and can define if the bodies of the two attached nodes should be able to collide with each other.

Tutorials
---------

- `3D Truck Town Demo <https://godotengine.org/asset-library/asset/524>`__

Properties
----------

+---------------------------------+------------------------------------------------------------------------------+------------------+
| :ref:`bool<class_bool>`         | :ref:`collision/exclude_nodes<class_Joint_property_collision/exclude_nodes>` | ``true``         |
+---------------------------------+------------------------------------------------------------------------------+------------------+
| :ref:`NodePath<class_NodePath>` | :ref:`nodes/node_a<class_Joint_property_nodes/node_a>`                       | ``NodePath("")`` |
+---------------------------------+------------------------------------------------------------------------------+------------------+
| :ref:`NodePath<class_NodePath>` | :ref:`nodes/node_b<class_Joint_property_nodes/node_b>`                       | ``NodePath("")`` |
+---------------------------------+------------------------------------------------------------------------------+------------------+
| :ref:`int<class_int>`           | :ref:`solver/priority<class_Joint_property_solver/priority>`                 | ``1``            |
+---------------------------------+------------------------------------------------------------------------------+------------------+

Property Descriptions
---------------------

.. _class_Joint_property_collision/exclude_nodes:

- :ref:`bool<class_bool>` **collision/exclude_nodes**

+-----------+-----------------------------------------+
| *Default* | ``true``                                |
+-----------+-----------------------------------------+
| *Setter*  | set_exclude_nodes_from_collision(value) |
+-----------+-----------------------------------------+
| *Getter*  | get_exclude_nodes_from_collision()      |
+-----------+-----------------------------------------+

If ``true``, the two bodies of the nodes are not able to collide with each other.

----

.. _class_Joint_property_nodes/node_a:

- :ref:`NodePath<class_NodePath>` **nodes/node_a**

+-----------+-------------------+
| *Default* | ``NodePath("")``  |
+-----------+-------------------+
| *Setter*  | set_node_a(value) |
+-----------+-------------------+
| *Getter*  | get_node_a()      |
+-----------+-------------------+

The node attached to the first side (A) of the joint.

----

.. _class_Joint_property_nodes/node_b:

- :ref:`NodePath<class_NodePath>` **nodes/node_b**

+-----------+-------------------+
| *Default* | ``NodePath("")``  |
+-----------+-------------------+
| *Setter*  | set_node_b(value) |
+-----------+-------------------+
| *Getter*  | get_node_b()      |
+-----------+-------------------+

The node attached to the second side (B) of the joint.

----

.. _class_Joint_property_solver/priority:

- :ref:`int<class_int>` **solver/priority**

+-----------+----------------------------+
| *Default* | ``1``                      |
+-----------+----------------------------+
| *Setter*  | set_solver_priority(value) |
+-----------+----------------------------+
| *Getter*  | get_solver_priority()      |
+-----------+----------------------------+

The priority used to define which solver is executed first for multiple joints. The lower the value, the higher the priority.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
