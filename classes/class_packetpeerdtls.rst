:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PacketPeerDTLS.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PacketPeerDTLS:

PacketPeerDTLS
==============

**Inherits:** :ref:`PacketPeer<class_PacketPeer>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

DTLS packet peer.

Description
-----------

This class represents a DTLS peer connection. It can be used to connect to a DTLS server, and is returned by :ref:`DTLSServer.take_connection<class_DTLSServer_method_take_connection>`.

**Warning:** SSL/TLS certificate revocation and certificate pinning are currently not supported. Revoked certificates are accepted as long as they are otherwise valid. If this is a concern, you may want to use automatically managed certificates with a short validity period.

Methods
-------

+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Error<enum_@GlobalScope_Error>`     | :ref:`connect_to_peer<class_PacketPeerDTLS_method_connect_to_peer>` **(** :ref:`PacketPeerUDP<class_PacketPeerUDP>` packet_peer, :ref:`bool<class_bool>` validate_certs=true, :ref:`String<class_String>` for_hostname="", :ref:`X509Certificate<class_X509Certificate>` valid_certificate=null **)** |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`disconnect_from_peer<class_PacketPeerDTLS_method_disconnect_from_peer>` **(** **)**                                                                                                                                                                                                             |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Status<enum_PacketPeerDTLS_Status>` | :ref:`get_status<class_PacketPeerDTLS_method_get_status>` **(** **)** |const|                                                                                                                                                                                                                         |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                      | :ref:`poll<class_PacketPeerDTLS_method_poll>` **(** **)**                                                                                                                                                                                                                                             |
+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_PacketPeerDTLS_Status:

.. _class_PacketPeerDTLS_constant_STATUS_DISCONNECTED:

.. _class_PacketPeerDTLS_constant_STATUS_HANDSHAKING:

.. _class_PacketPeerDTLS_constant_STATUS_CONNECTED:

.. _class_PacketPeerDTLS_constant_STATUS_ERROR:

.. _class_PacketPeerDTLS_constant_STATUS_ERROR_HOSTNAME_MISMATCH:

enum **Status**:

- **STATUS_DISCONNECTED** = **0** --- A status representing a ``PacketPeerDTLS`` that is disconnected.

- **STATUS_HANDSHAKING** = **1** --- A status representing a ``PacketPeerDTLS`` that is currently performing the handshake with a remote peer.

- **STATUS_CONNECTED** = **2** --- A status representing a ``PacketPeerDTLS`` that is connected to a remote peer.

- **STATUS_ERROR** = **3** --- A status representing a ``PacketPeerDTLS`` in a generic error state.

- **STATUS_ERROR_HOSTNAME_MISMATCH** = **4** --- An error status that shows a mismatch in the DTLS certificate domain presented by the host and the domain requested for validation.

Method Descriptions
-------------------

.. _class_PacketPeerDTLS_method_connect_to_peer:

- :ref:`Error<enum_@GlobalScope_Error>` **connect_to_peer** **(** :ref:`PacketPeerUDP<class_PacketPeerUDP>` packet_peer, :ref:`bool<class_bool>` validate_certs=true, :ref:`String<class_String>` for_hostname="", :ref:`X509Certificate<class_X509Certificate>` valid_certificate=null **)**

Connects a ``peer`` beginning the DTLS handshake using the underlying :ref:`PacketPeerUDP<class_PacketPeerUDP>` which must be connected (see :ref:`PacketPeerUDP.connect_to_host<class_PacketPeerUDP_method_connect_to_host>`). If ``validate_certs`` is ``true``, ``PacketPeerDTLS`` will validate that the certificate presented by the remote peer and match it with the ``for_hostname`` argument. You can specify a custom :ref:`X509Certificate<class_X509Certificate>` to use for validation via the ``valid_certificate`` argument.

----

.. _class_PacketPeerDTLS_method_disconnect_from_peer:

- void **disconnect_from_peer** **(** **)**

Disconnects this peer, terminating the DTLS session.

----

.. _class_PacketPeerDTLS_method_get_status:

- :ref:`Status<enum_PacketPeerDTLS_Status>` **get_status** **(** **)** |const|

Returns the status of the connection. See :ref:`Status<enum_PacketPeerDTLS_Status>` for values.

----

.. _class_PacketPeerDTLS_method_poll:

- void **poll** **(** **)**

Poll the connection to check for incoming packets. Call this frequently to update the status and keep the connection working.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
