.. _doc_building_the_documentation:

Building Rebel Documentation with Sphinx
========================================

This website is created by converting Rebel Documentation's ``.rst`` files to ``.html``.
This is done automatically every time an ``.rst`` file is updated via a Pull Request.
For more information on updating Rebel Documentation, see :ref:`doc_contributing_to_the_documentation`.
The automatic build generated by a Pull Request allows you to see the effect of the changes.
However, if you want to see the effect of the changes before submitting a Pull Request,
you can build Rebel Documentation locally.

This page explains how to build Rebel Documentation locally.
It is divided into 4 sections:

#. `Overview of the Rebel Documentation build process`_
#. `Preparing your system for building Rebel Documentation locally`_
#. `Building and viewing Rebel Documentation locally`_
#. `Known issues and troubleshooting`_

Overview of the Rebel Documentation build process
-------------------------------------------------

The documentation uses the `reStructuredText <https://docutils.sourceforge.io/rst.html>`__ (reST) file format.
The Rebel Documentation website is generated using `Sphinx <https://www.sphinx-doc.org/>`__,
which uses `Docutils <https://docutils.sourceforge.io/>`__ to convert the reST files to HTML.

`Rebel Documentation <https://docs.rebeltoolbox.com/>`__ is hosted by `Read the Docs <https://readthedocs.org/>`__.
Whenever the `Rebel Documentation repository <https://github.com/RebelToolbox/RebelDocumentation>`__ is updated,
Read the Docs will update its local copy and build Rebel Documentation using Sphinx.
If the build is successful, the update is published to the Rebel Documentation website.

To ensure that all updates will result in a successful build,
the Rebel Documentation repository is updated via `Pull Requests <https://docs.github.com/en/pull-requests>`__.
Every time a Pull Request is created or updated,
Read the Docs will create a local copy of the update and build it.
If the build is successful, it will be published on a special build website, where the changes can be reviewed.

You can do the same thing manually, by:

#. Creating a local copy of the Rebel Documentation repository
#. Building Rebel Documentation locally
#. Reviewing your changes locally

The next section will explain how to prepare your system for building Rebel Documentation locally.
The following section will explain how to build and view your local copy of Rebel Documentation.

Preparing your system for building Rebel Documentation locally
--------------------------------------------------------------

To build and view a local copy of Rebel Documentation you will need to:

#. `Create a local copy of the Rebel Documentation repository`_
#. `Install Python3 and Pip3`_
#. `Install Sphinx`_
#. `Install Python virtual environments`_
#. `Create a Python virtual environment`_
#. `Install all the Rebel Documentation requirements`_

Create a local copy of the Rebel Documentation repository
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you have not done so already,
we highly recommend you first learn how to :ref:`edit Rebel Documentation <doc_contributing_to_the_documentation>`.
Although you can edit Rebel Documentation and submit Pull Requests online,
we recommend you learn how to use `Git <https://git-scm.com/>`__ and edit Rebel Documentation locally.
Atlassian provides some great `Git tutorials <https://www.atlassian.com/git/tutorials>`__.

Ideally, you have already created a local copy of Rebel Documentation.
If not, you can create a local copy by opening up a command prompt and running the following command:

.. code:: sh

    git clone https://github.com/RebelToolbox/RebelDocumentation.git

This will create a folder called ``RebelDocumentation`` which will contain a copy of the Rebel Documentation repository.

Install Python3 and Pip3
^^^^^^^^^^^^^^^^^^^^^^^^

`Python <https://www.python.org/>`__ is the programming language used by `Sphinx <https://www.sphinx-doc.org/>`__.
`Pip <https://pip.pypa.io/>`__ is the package manager used by Python to install the software packages needed by Sphinx.

Python3 may already be installed on your computer.
If Python is not installed, or your version of Python is out of date, install the latest version of Python.
For more information go to the Python download website: https://www.python.org/downloads/

Pip is normally installed when installing Python.
If Pip is not installed go to the Pip installation website for instructions on how to install it:
https://pip.pypa.io/en/stable/installation/

Install Sphinx
^^^^^^^^^^^^^^

Sphinx is used to build Rebel Documentation from the repository's ``.rst`` files.
Refer to the Sphinx installation website for instructions on how to install it:
https://www.sphinx-doc.org/en/master/usage/installation.html

Install Python virtual environments
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We highly recommend running your Sphinx builds in a `Python virtual environment <https://virtualenv.pypa.io/en/latest/index.html>`__.

You can use ``pip`` to install ``virtualenv``:

.. code:: sh

    pip install virtualenv


Create a Python virtual environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To create and activate the virtual environment run the following commands:

.. tabs::

    .. group-tab:: Linux

        .. code:: sh

            virtualenv env
            source env/bin/activate

    .. group-tab:: macOS

        .. code:: sh

            virtualenv env
            source env/bin/activate

    .. group-tab:: Windows

        .. code:: sh

            virtualenv env
            .\env\Scripts\activate

The virtual environment called ``env`` is excluded from Rebel Documentation Git updates.
Therefore, it is safe to create the ``env`` virtual environment in your local Rebel Documentation folder.

Install all the Rebel Documentation requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To successfully build Rebel Documentation, you need to install all the required software modules.
We have created a ``requirements.txt`` file that specifies all the required software modules and versions.
To install all the required software, from the command line, run:

.. code:: sh

    pip install -r requirements.txt

Building and viewing Rebel Documentation locally
------------------------------------------------

Preparing your system for building Rebel Documentation locally only needs to be done once.
All the required software and settings are saved in your virtual environment.
Therefore, it is important to remember to always activate your virtual environment.

.. tabs::

    .. group-tab:: Linux

        .. code:: sh

            source env/bin/activate

    .. group-tab:: macOS

        .. code:: sh

            source env/bin/activate

    .. group-tab:: Windows

        .. code:: sh

            .\env\Scripts\activate

If you have successfully prepared your system for building Rebel Documentation,
building Rebel Documentation is as simple as running:

.. tabs::

    .. group-tab:: Linux

        .. code:: sh

            make html

    .. group-tab:: macOS

        .. code:: sh

            make html

    .. group-tab:: Windows

        .. code:: sh

            .\make.bat html

The initial build may take a long time, because
the ``api/`` folder contains hundreds of files.
However, subsequent, incremental builds will be much quicker.

Once Rebel Documentation has built,
you can view the local build by opening ``_build/html/index.html`` in your web browser.

Known issues and troubleshooting
--------------------------------

If your build reports a ``MemoryError`` or ``EOFError``,
try removing the ``api/`` folder and running ``make html`` again.
This will build Rebel Documentation without the Rebel Engine API.

.. warning::

    If you delete the ``api/`` folder, do not use ``git add .`` when
    working on a pull request or the whole ``api/`` folder will be
    removed when you commit.
